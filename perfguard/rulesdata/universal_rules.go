// Code generated by "precompile.go". DO NOT EDIT.

package rulesdata

import "github.com/quasilyte/go-ruleguard/ruleguard/ir"

var Universal = &ir.File{
	PkgPath:       "gorules",
	CustomDecls:   []string{},
	BundleImports: []ir.BundleImport{},
	RuleGroups: []ir.RuleGroup{
		{
			Line:        43,
			Name:        "stringsCut",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for strings.Cut",
			DocBefore:   "email := strings.Split(s, \"@\")[0]",
			DocAfter:    "email, _, _ := strings.Cut(s, \"@\")",
			Rules: []ir.Rule{
				{
					Line:            44,
					SyntaxPatterns:  []ir.PatternString{{Line: 44, Value: "$dst := strings.Split($s, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ := strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ := strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  45,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				{
					Line:            47,
					SyntaxPatterns:  []ir.PatternString{{Line: 47, Value: "$dst = strings.Split($s, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ = strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ = strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  48,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		{
			Line:        56,
			Name:        "bytesCut",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for bytes.Cut",
			DocBefore:   "email := bytes.Split(b, \"@\")[0]",
			DocAfter:    "email, _, _ := bytes.Cut(b, []byte(\"@\"))",
			Rules: []ir.Rule{
				{
					Line:            57,
					SyntaxPatterns:  []ir.PatternString{{Line: 57, Value: "$dst := bytes.Split($b, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ := bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ := bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  58,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				{
					Line:            60,
					SyntaxPatterns:  []ir.PatternString{{Line: 60, Value: "$dst = bytes.Split($b, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ = bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ = bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  61,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		{
			Line:        69,
			Name:        "stringsClone",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for strings.Clone",
			DocBefore:   "s2 := string([]byte(s1))",
			DocAfter:    "s2 := strings.Clone(s1)",
			Rules: []ir.Rule{{
				Line:            70,
				SyntaxPatterns:  []ir.PatternString{{Line: 70, Value: "string([]byte($s))"}},
				ReportTemplate:  "$$ => strings.Clone($s)",
				SuggestTemplate: "strings.Clone($s)",
				WhereExpr: ir.FilterExpr{
					Line: 71,
					Op:   ir.FilterAndOp,
					Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const &&\n\tm.GoVersion().GreaterEqThan(\"1.18\")",
					Args: []ir.FilterExpr{
						{
							Line: 71,
							Op:   ir.FilterAndOp,
							Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const",
							Args: []ir.FilterExpr{
								{
									Line:  71,
									Op:    ir.FilterVarTypeIsOp,
									Src:   "m[\"s\"].Type.Is(`string`)",
									Value: "s",
									Args:  []ir.FilterExpr{{Line: 71, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
								},
								{
									Line: 72,
									Op:   ir.FilterNotOp,
									Src:  "!m[\"s\"].Const",
									Args: []ir.FilterExpr{{
										Line:  72,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"s\"].Const",
										Value: "s",
									}},
								},
							},
						},
						{
							Line:  73,
							Op:    ir.FilterGoVersionGreaterEqThanOp,
							Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
							Value: "1.18",
						},
					},
				},
			}},
		},
		{
			Line:        81,
			Name:        "equalFold",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects unoptimal strings/bytes case-insensitive comparison",
			DocBefore:   "strings.ToLower(x) == strings.ToLower(y)",
			DocAfter:    "strings.EqualFold(x, y)",
			Rules: []ir.Rule{
				{
					Line: 83,
					SyntaxPatterns: []ir.PatternString{
						{Line: 84, Value: "strings.ToLower($x) == $y"},
						{Line: 85, Value: "strings.ToLower($x) == strings.ToLower($y)"},
						{Line: 86, Value: "$x == strings.ToLower($y)"},
						{Line: 87, Value: "strings.ToUpper($x) == $y"},
						{Line: 88, Value: "strings.ToUpper($x) == strings.ToUpper($y)"},
						{Line: 89, Value: "$x == strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => strings.EqualFold($x, $y)",
					SuggestTemplate: "strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 90,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 90,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 90, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 90, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 90,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 90, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 90, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 94,
					SyntaxPatterns: []ir.PatternString{
						{Line: 95, Value: "strings.ToLower($x) != $y"},
						{Line: 96, Value: "strings.ToLower($x) != strings.ToLower($y)"},
						{Line: 97, Value: "$x != strings.ToLower($y)"},
						{Line: 98, Value: "strings.ToUpper($x) != $y"},
						{Line: 99, Value: "strings.ToUpper($x) != strings.ToUpper($y)"},
						{Line: 100, Value: "$x != strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => !strings.EqualFold($x, $y)",
					SuggestTemplate: "!strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 101,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 101,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 101, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 101, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 101,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 101, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 101, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 105,
					SyntaxPatterns: []ir.PatternString{
						{Line: 106, Value: "bytes.Equal(bytes.ToLower($x), $y)"},
						{Line: 107, Value: "bytes.Equal(bytes.ToLower($x), bytes.ToLower($y))"},
						{Line: 108, Value: "bytes.Equal($x, bytes.ToLower($y))"},
						{Line: 109, Value: "bytes.Equal(bytes.ToUpper($x), $y)"},
						{Line: 110, Value: "bytes.Equal(bytes.ToUpper($x), bytes.ToUpper($y))"},
						{Line: 111, Value: "bytes.Equal($x, bytes.ToUpper($y))"},
					},
					ReportTemplate:  "$$ => bytes.EqualFold($x, $y)",
					SuggestTemplate: "bytes.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 112,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 112,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 112, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 112, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 112,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 112, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 112, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 116,
					SyntaxPatterns: []ir.PatternString{
						{Line: 117, Value: "strings.HasPrefix(strings.ToLower($x), $y)"},
						{Line: 118, Value: "strings.HasPrefix(strings.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && strings.EqualFold($x[:len($y)], $y))",
					SuggestTemplate: "(len($x) >= len($y) && strings.EqualFold($x[:len($y)], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 119,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 119,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 119, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 119, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 119,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 119, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 119, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 121,
					SyntaxPatterns: []ir.PatternString{
						{Line: 122, Value: "strings.HasSuffix(strings.ToLower($x), $y)"},
						{Line: 123, Value: "strings.HasSuffix(strings.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && strings.EqualFold($x[len($x)-len($y):], $y))",
					SuggestTemplate: "(len($x) >= len($y) && strings.EqualFold($x[len($x)-len($y):], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 124,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 124,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 124, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 124, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 124,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 124, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 124, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 128,
					SyntaxPatterns: []ir.PatternString{
						{Line: 129, Value: "bytes.HasPrefix(bytes.ToLower($x), $y)"},
						{Line: 130, Value: "bytes.HasPrefix(bytes.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && bytes.EqualFold($x[:len($y)], $y))",
					SuggestTemplate: "(len($x) >= len($y) && bytes.EqualFold($x[:len($y)], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 131,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 131,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 131, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 131, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 131,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 131, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 131, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 133,
					SyntaxPatterns: []ir.PatternString{
						{Line: 134, Value: "bytes.HasSuffix(bytes.ToLower($x), $y)"},
						{Line: 135, Value: "bytes.HasSuffix(bytes.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && bytes.EqualFold($x[len($x)-len($y):], $y))",
					SuggestTemplate: "(len($x) >= len($y) && bytes.EqualFold($x[len($x)-len($y):], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 136,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 136,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 136, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 136, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 136,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 136, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 136, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
			},
		},
		{
			Line:        142,
			Name:        "redundantSprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects redundant fmt.Sprint calls",
			Rules: []ir.Rule{
				{
					Line: 143,
					SyntaxPatterns: []ir.PatternString{
						{Line: 143, Value: "fmt.Sprint($x)"},
						{Line: 143, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 143, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.String()",
					SuggestTemplate: "$x.String()",
					WhereExpr: ir.FilterExpr{
						Line:  144,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 144, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
					},
				},
				{
					Line: 147,
					SyntaxPatterns: []ir.PatternString{
						{Line: 147, Value: "fmt.Sprint($x)"},
						{Line: 147, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 147, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.Error()",
					SuggestTemplate: "$x.Error()",
					WhereExpr: ir.FilterExpr{
						Line:  148,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`error`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 148, Op: ir.FilterStringOp, Src: "`error`", Value: "error"}},
					},
				},
				{
					Line: 151,
					SyntaxPatterns: []ir.PatternString{
						{Line: 151, Value: "fmt.Sprint($x)"},
						{Line: 151, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 151, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x",
					SuggestTemplate: "$x",
					WhereExpr: ir.FilterExpr{
						Line:  152,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`string`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 152, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line: 155,
					SyntaxPatterns: []ir.PatternString{
						{Line: 155, Value: "fmt.Sprint($x)"},
						{Line: 155, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 155, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => string($x)",
					SuggestTemplate: "string($x)",
					WhereExpr: ir.FilterExpr{
						Line: 156,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.ConvertibleTo(`string`) && !m[\"x\"].Type.OfKind(\"numeric\")",
						Args: []ir.FilterExpr{
							{
								Line:  156,
								Op:    ir.FilterVarTypeConvertibleToOp,
								Src:   "m[\"x\"].Type.ConvertibleTo(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 156, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line: 156,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Type.OfKind(\"numeric\")",
								Args: []ir.FilterExpr{{
									Line:  156,
									Op:    ir.FilterVarTypeOfKindOp,
									Src:   "m[\"x\"].Type.OfKind(\"numeric\")",
									Value: "x",
									Args:  []ir.FilterExpr{{Line: 156, Op: ir.FilterStringOp, Src: "\"numeric\"", Value: "numeric"}},
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        164,
			Name:        "redundantFprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects redundant fmt.Fprint calls",
			DocBefore:   "fmt.Fprintf(w, \"%s\", data)",
			DocAfter:    "w.WriteString(data.String())",
			Rules: []ir.Rule{
				{
					Line: 165,
					SyntaxPatterns: []ir.PatternString{
						{Line: 165, Value: "fmt.Fprint($w, $x)"},
						{Line: 165, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 165, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x.String())",
					SuggestTemplate: "$w.WriteString($x.String())",
					WhereExpr: ir.FilterExpr{
						Line: 166,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  166,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 166, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
							{
								Line:  166,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 166, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 169,
					SyntaxPatterns: []ir.PatternString{
						{Line: 169, Value: "fmt.Fprint($w, $x)"},
						{Line: 169, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 169, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x.Error())",
					SuggestTemplate: "$w.WriteString($x.Error())",
					WhereExpr: ir.FilterExpr{
						Line: 170,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`error`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  170,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`error`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 170, Op: ir.FilterStringOp, Src: "`error`", Value: "error"}},
							},
							{
								Line:  170,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 170, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 173,
					SyntaxPatterns: []ir.PatternString{
						{Line: 173, Value: "fmt.Fprint($w, $x)"},
						{Line: 173, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 173, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x)",
					SuggestTemplate: "$w.WriteString($x)",
					WhereExpr: ir.FilterExpr{
						Line: 174,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  174,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 174, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  174,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 174, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 177,
					SyntaxPatterns: []ir.PatternString{
						{Line: 177, Value: "fmt.Fprint($w, $x)"},
						{Line: 177, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 177, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.Write($x)",
					SuggestTemplate: "$w.Write($x)",
					WhereExpr: ir.FilterExpr{
						Line:  178,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`[]byte`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 178, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
			},
		},
		{
			Line:        186,
			Name:        "sliceClone",
			MatcherName: "m",
			DocTags:     []string{"o2", "score2"},
			DocSummary:  "Detects slice copying patterns that can be optimized",
			DocBefore:   "dst := append([]int(nil), src...)",
			DocAfter:    "dst := make([]int, len(src)); copy(dst, src)",
			Rules: []ir.Rule{
				{
					Line: 187,
					SyntaxPatterns: []ir.PatternString{
						{Line: 187, Value: "$dst = append([]$elem(nil), $src...)"},
						{Line: 187, Value: "$dst = append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst = make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst = make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 188,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{{
							Line:  188,
							Op:    ir.FilterVarTypeHasPointersOp,
							Src:   "m[\"elem\"].Type.HasPointers()",
							Value: "elem",
						}},
					},
				},
				{
					Line: 190,
					SyntaxPatterns: []ir.PatternString{
						{Line: 190, Value: "$dst := append([]$elem(nil), $src...)"},
						{Line: 190, Value: "$dst := append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst := make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst := make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 191,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{{
							Line:  191,
							Op:    ir.FilterVarTypeHasPointersOp,
							Src:   "m[\"elem\"].Type.HasPointers()",
							Value: "elem",
						}},
					},
				},
			},
		},
		{
			Line:        197,
			Name:        "stringsJoinConcat",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detect strings.Join usages that can be rewritten as a string concat",
			Rules: []ir.Rule{
				{
					Line:            198,
					SyntaxPatterns:  []ir.PatternString{{Line: 198, Value: "strings.Join([]string{$x, $y}, \"\")"}},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 199,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 199,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{{
									Line:  199,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"x\"].Const",
									Value: "x",
								}},
							},
							{
								Line: 199,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{{
									Line:  199,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"y\"].Const",
									Value: "y",
								}},
							},
						},
					},
				},
				{
					Line:            201,
					SyntaxPatterns:  []ir.PatternString{{Line: 201, Value: "strings.Join([]string{$x, $y, $z}, \"\")"}},
					ReportTemplate:  "$$ => $x + $y + $z",
					SuggestTemplate: "$x + $y + $z",
					WhereExpr: ir.FilterExpr{
						Line: 202,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 202,
								Op:   ir.FilterAndOp,
								Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									{
										Line: 202,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"x\"].Const",
										Args: []ir.FilterExpr{{
											Line:  202,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"x\"].Const",
											Value: "x",
										}},
									},
									{
										Line: 202,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{{
											Line:  202,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"y\"].Const",
											Value: "y",
										}},
									},
								},
							},
							{
								Line: 202,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{{
									Line:  202,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"z\"].Const",
									Value: "z",
								}},
							},
						},
					},
				},
				{
					Line:            205,
					SyntaxPatterns:  []ir.PatternString{{Line: 205, Value: "strings.Join([]string{$x, $y}, $glue)"}},
					ReportTemplate:  "$$ => $x + $glue + $y",
					SuggestTemplate: "$x + $glue + $y",
					WhereExpr: ir.FilterExpr{
						Line: 206,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 206,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{{
									Line:  206,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"x\"].Const",
									Value: "x",
								}},
							},
							{
								Line: 206,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{{
									Line:  206,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"y\"].Const",
									Value: "y",
								}},
							},
						},
					},
				},
				{
					Line:            209,
					SyntaxPatterns:  []ir.PatternString{{Line: 209, Value: "strings.Join([]string{$x, $y, $z}, $glue)"}},
					ReportTemplate:  "$$ => $x + $glue + $y + $glue + $z",
					SuggestTemplate: "$x + $glue + $y + $glue + $z",
					WhereExpr: ir.FilterExpr{
						Line: 210,
						Op:   ir.FilterAndOp,
						Src:  "m[\"glue\"].Const && !m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 210,
								Op:   ir.FilterAndOp,
								Src:  "m[\"glue\"].Const && !m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									{
										Line: 210,
										Op:   ir.FilterAndOp,
										Src:  "m[\"glue\"].Const && !m[\"x\"].Const",
										Args: []ir.FilterExpr{
											{
												Line:  210,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"glue\"].Const",
												Value: "glue",
											},
											{
												Line: 210,
												Op:   ir.FilterNotOp,
												Src:  "!m[\"x\"].Const",
												Args: []ir.FilterExpr{{
													Line:  210,
													Op:    ir.FilterVarConstOp,
													Src:   "m[\"x\"].Const",
													Value: "x",
												}},
											},
										},
									},
									{
										Line: 210,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{{
											Line:  210,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"y\"].Const",
											Value: "y",
										}},
									},
								},
							},
							{
								Line: 210,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{{
									Line:  210,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"z\"].Const",
									Value: "z",
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        218,
			Name:        "sprintConcat",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects sprint calls that can be rewritten as a string concat",
			DocBefore:   "fmt.Sprintf(\"%s%s\", x, y)",
			DocAfter:    "x + y",
			Rules: []ir.Rule{
				{
					Line:            219,
					SyntaxPatterns:  []ir.PatternString{{Line: 219, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"}},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 220,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  220,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 220, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  220,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`string`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 220, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            223,
					SyntaxPatterns:  []ir.PatternString{{Line: 223, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"}},
					ReportTemplate:  "$$ => $x.String() + $y.String()",
					SuggestTemplate: "$x.String() + $y.String()",
					WhereExpr: ir.FilterExpr{
						Line: 224,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"y\"].Type.Implements(`fmt.Stringer`)",
						Args: []ir.FilterExpr{
							{
								Line:  224,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 224, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
							{
								Line:  224,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"y\"].Type.Implements(`fmt.Stringer`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 224, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        232,
			Name:        "strconv",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects fmt uses that can be replaced with strconv",
			DocBefore:   "fmt.Sprintf(\"%d\", i)",
			DocAfter:    "strconv.Itoa(i)",
			Rules: []ir.Rule{
				{
					Line: 236,
					SyntaxPatterns: []ir.PatternString{
						{Line: 236, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 236, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 236, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.Itoa($x)",
					SuggestTemplate: "strconv.Itoa($x)",
					WhereExpr: ir.FilterExpr{
						Line:  237,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 237, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line: 241,
					SyntaxPatterns: []ir.PatternString{
						{Line: 241, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 241, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 241, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 10)",
					SuggestTemplate: "strconv.FormatInt($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  242,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 242, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"}},
					},
				},
				{
					Line:            243,
					SyntaxPatterns:  []ir.PatternString{{Line: 243, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 16)",
					SuggestTemplate: "strconv.FormatInt($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  244,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 244, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"}},
					},
				},
				{
					Line: 245,
					SyntaxPatterns: []ir.PatternString{
						{Line: 245, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 245, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 245, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 10)",
					SuggestTemplate: "strconv.FormatUint($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  246,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 246, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"}},
					},
				},
				{
					Line:            247,
					SyntaxPatterns:  []ir.PatternString{{Line: 247, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 16)",
					SuggestTemplate: "strconv.FormatUint($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  248,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 248, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"}},
					},
				},
				{
					Line: 250,
					SyntaxPatterns: []ir.PatternString{
						{Line: 250, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 250, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 250, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 10)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  251,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 251, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line:            252,
					SyntaxPatterns:  []ir.PatternString{{Line: 252, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 16)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  253,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 253, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line: 255,
					SyntaxPatterns: []ir.PatternString{
						{Line: 255, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 255, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 255, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 10)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  256,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 256, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"}},
					},
				},
				{
					Line:            257,
					SyntaxPatterns:  []ir.PatternString{{Line: 257, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 16)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  258,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 258, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"}},
					},
				},
			},
		},
		{
			Line:        265,
			Name:        "appendAPI",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects cases that can benefit from append-friendly APIs",
			DocBefore:   "b = append(b, strconv.Itoa(v)...)",
			DocAfter:    "b = strconv.AppendInt(b, v, 10)",
			Rules: []ir.Rule{
				{
					Line:            273,
					SyntaxPatterns:  []ir.PatternString{{Line: 273, Value: "$b = append($b, strconv.Itoa($x)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, int64($x), 10)",
					SuggestTemplate: "$b = strconv.AppendInt($b, int64($x), 10)",
				},
				{
					Line:            275,
					SyntaxPatterns:  []ir.PatternString{{Line: 275, Value: "$b = append($b, strconv.FormatInt($x, $base)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendInt($b, $x, $base)",
				},
				{
					Line:            277,
					SyntaxPatterns:  []ir.PatternString{{Line: 277, Value: "$b = append($b, strconv.FormatUint($x, $base)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendUint($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendUint($b, $x, $base)",
				},
				{
					Line:            280,
					SyntaxPatterns:  []ir.PatternString{{Line: 280, Value: "$b = append($b, $t.Format($layout)...)"}},
					ReportTemplate:  "$$ => $b = $t.AppendFormat($b, $layout)",
					SuggestTemplate: "$b = $t.AppendFormat($b, $layout)",
					WhereExpr: ir.FilterExpr{
						Line: 281,
						Op:   ir.FilterOrOp,
						Src:  "m[\"t\"].Type.Is(`time.Time`) || m[\"t\"].Type.Is(`*time.Time`)",
						Args: []ir.FilterExpr{
							{
								Line:  281,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`time.Time`)",
								Value: "t",
								Args:  []ir.FilterExpr{{Line: 281, Op: ir.FilterStringOp, Src: "`time.Time`", Value: "time.Time"}},
							},
							{
								Line:  281,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`*time.Time`)",
								Value: "t",
								Args:  []ir.FilterExpr{{Line: 281, Op: ir.FilterStringOp, Src: "`*time.Time`", Value: "*time.Time"}},
							},
						},
					},
				},
				{
					Line:            284,
					SyntaxPatterns:  []ir.PatternString{{Line: 284, Value: "$b = append($b, $v.String()...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, 'g', 10)",
					SuggestTemplate: "$b = $v.Append($b, 'g', 10)",
					WhereExpr: ir.FilterExpr{
						Line: 285,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							{
								Line:  285,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 285, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"}},
							},
							{
								Line:  285,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 285, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"}},
							},
						},
					},
				},
				{
					Line:            287,
					SyntaxPatterns:  []ir.PatternString{{Line: 287, Value: "$b = append($b, $v.Text($format, $prec)...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, $format, $prec)",
					SuggestTemplate: "$b = $v.Append($b, $format, $prec)",
					WhereExpr: ir.FilterExpr{
						Line: 288,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							{
								Line:  288,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 288, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"}},
							},
							{
								Line:  288,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 288, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"}},
							},
						},
					},
				},
				{
					Line:            291,
					SyntaxPatterns:  []ir.PatternString{{Line: 291, Value: "$b = append($b, $v.String()...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, 10)",
					SuggestTemplate: "$b = $v.Append($b, 10)",
					WhereExpr: ir.FilterExpr{
						Line: 292,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							{
								Line:  292,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 292, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"}},
							},
							{
								Line:  292,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 292, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"}},
							},
						},
					},
				},
				{
					Line:            294,
					SyntaxPatterns:  []ir.PatternString{{Line: 294, Value: "$b = append($b, $v.Text($base)...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, $base)",
					SuggestTemplate: "$b = $v.Append($b, $base)",
					WhereExpr: ir.FilterExpr{
						Line: 295,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							{
								Line:  295,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 295, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"}},
							},
							{
								Line:  295,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 295, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        303,
			Name:        "convReorder",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects patterns that can be reordered to make the code faster",
			DocBefore:   "strings.TrimSpace(string(b))",
			DocAfter:    "string(bytes.TrimSpace(b))",
			Rules: []ir.Rule{
				{
					Line:            309,
					SyntaxPatterns:  []ir.PatternString{{Line: 309, Value: "strings.TrimSpace(string($b))"}},
					ReportTemplate:  "$$ => string(bytes.TrimSpace($b))",
					SuggestTemplate: "string(bytes.TrimSpace($b))",
					WhereExpr: ir.FilterExpr{
						Line:  310,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 310, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            313,
					SyntaxPatterns:  []ir.PatternString{{Line: 313, Value: "bytes.TrimSpace([]byte($s))"}},
					ReportTemplate:  "$$ => []byte(strings.TrimSpace($s))",
					SuggestTemplate: "[]byte(strings.TrimSpace($s))",
					WhereExpr: ir.FilterExpr{
						Line:  314,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 314, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            317,
					SyntaxPatterns:  []ir.PatternString{{Line: 317, Value: "strings.TrimPrefix(string($b1), string($b2))"}},
					ReportTemplate:  "$$ => string(bytes.TrimPrefix($b1, $b2))",
					SuggestTemplate: "string(bytes.TrimPrefix($b1, $b2))",
					WhereExpr: ir.FilterExpr{
						Line: 318,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  318,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b1\"].Type.Is(`[]byte`)",
								Value: "b1",
								Args:  []ir.FilterExpr{{Line: 318, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  318,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 318, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            321,
					SyntaxPatterns:  []ir.PatternString{{Line: 321, Value: "bytes.TrimPrefix([]byte($s1), []byte($s2))"}},
					ReportTemplate:  "$$ => []byte(strings.TrimPrefix($s1, $s2))",
					SuggestTemplate: "[]byte(strings.TrimPrefix($s1, $s2))",
					WhereExpr: ir.FilterExpr{
						Line: 322,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  322,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s1\"].Type.Is(`string`)",
								Value: "s1",
								Args:  []ir.FilterExpr{{Line: 322, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  322,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 322, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        330,
			Name:        "slicedConv",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects sliced slice copying that can be optimized",
			DocBefore:   "string(b)[:n]",
			DocAfter:    "string(b[:n])",
			Rules: []ir.Rule{
				{
					Line:            331,
					SyntaxPatterns:  []ir.PatternString{{Line: 331, Value: "string($b)[:$n]"}},
					ReportTemplate:  "$$ => string($b[:$n])",
					SuggestTemplate: "string($b[:$n])",
					WhereExpr: ir.FilterExpr{
						Line:  332,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 332, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            335,
					SyntaxPatterns:  []ir.PatternString{{Line: 335, Value: "[]byte($s)[:$n]"}},
					ReportTemplate:  "$$ => []byte($s[:$n])",
					SuggestTemplate: "[]byte($s[:$n])",
					WhereExpr: ir.FilterExpr{
						Line:  336,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 336, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
			},
		},
		{
			Line:        344,
			Name:        "stringCopyElim",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects redundant conversions between string and []byte",
			DocBefore:   "copy(b, []byte(s))",
			DocAfter:    "copy(b, s)",
			Rules: []ir.Rule{
				{
					Line:            345,
					SyntaxPatterns:  []ir.PatternString{{Line: 345, Value: "copy($b, []byte($s))"}},
					ReportTemplate:  "$$ => copy($b, $s)",
					SuggestTemplate: "copy($b, $s)",
					WhereExpr: ir.FilterExpr{
						Line:  346,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 346, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            349,
					SyntaxPatterns:  []ir.PatternString{{Line: 349, Value: "append($b, []byte($s)...)"}},
					ReportTemplate:  "$$ => append($b, $s...)",
					SuggestTemplate: "append($b, $s...)",
					WhereExpr: ir.FilterExpr{
						Line:  350,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 350, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            353,
					SyntaxPatterns:  []ir.PatternString{{Line: 353, Value: "len(string($b))"}},
					ReportTemplate:  "$$ => len($b)",
					SuggestTemplate: "len($b)",
					WhereExpr: ir.FilterExpr{
						Line:  353,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 353, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            355,
					SyntaxPatterns:  []ir.PatternString{{Line: 355, Value: "[]byte(strings.$f(string($b)))"}},
					ReportTemplate:  "$$ => bytes.$f($b)",
					SuggestTemplate: "bytes.$f($b)",
					WhereExpr: ir.FilterExpr{
						Line: 356,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
						Args: []ir.FilterExpr{
							{
								Line:  356,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 356, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  357,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 357, Op: ir.FilterStringOp, Src: "`ToUpper|ToLower|TrimSpace`", Value: "ToUpper|ToLower|TrimSpace"}},
							},
						},
					},
				},
				{
					Line:            360,
					SyntaxPatterns:  []ir.PatternString{{Line: 360, Value: "[]byte(strings.$f(string($b), $s2))"}},
					ReportTemplate:  "$$ => bytes.$f($b, []byte($s2))",
					SuggestTemplate: "bytes.$f($b, []byte($s2))",
					WhereExpr: ir.FilterExpr{
						Line: 361,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
						Args: []ir.FilterExpr{
							{
								Line:  361,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 361, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  362,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 362, Op: ir.FilterStringOp, Src: "`TrimPrefix|TrimSuffix`", Value: "TrimPrefix|TrimSuffix"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        370,
			Name:        "regexpStringCopyElim",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects inefficient regexp usage in regard to string/[]byte conversions",
			DocBefore:   "regexp.ReplaceAll([]byte(s), []byte(\"foo\"))",
			DocAfter:    "regexp.ReplaceAllString(s, \"foo\")",
			Rules: []ir.Rule{
				{
					Line:            373,
					SyntaxPatterns:  []ir.PatternString{{Line: 373, Value: "$re.Match([]byte($s))"}},
					ReportTemplate:  "$$ => $re.MatchString($s)",
					SuggestTemplate: "$re.MatchString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 374,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  374,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 374, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  374,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 374, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            377,
					SyntaxPatterns:  []ir.PatternString{{Line: 377, Value: "$re.FindIndex([]byte($s))"}},
					ReportTemplate:  "$$ => $re.FindStringIndex($s)",
					SuggestTemplate: "$re.FindStringIndex($s)",
					WhereExpr: ir.FilterExpr{
						Line: 378,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  378,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 378, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  378,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 378, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            381,
					SyntaxPatterns:  []ir.PatternString{{Line: 381, Value: "$re.FindAllIndex([]byte($s), $n)"}},
					ReportTemplate:  "$$ => $re.FindAllStringIndex($s, $n)",
					SuggestTemplate: "$re.FindAllStringIndex($s, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 382,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  382,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 382, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  382,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 382, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            385,
					SyntaxPatterns:  []ir.PatternString{{Line: 385, Value: "string($re.ReplaceAll([]byte($s), []byte($s2)))"}},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, $s2)",
					SuggestTemplate: "$re.ReplaceAllString($s, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 386,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 386,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  386,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 386, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  386,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args:  []ir.FilterExpr{{Line: 386, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  386,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 386, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            389,
					SyntaxPatterns:  []ir.PatternString{{Line: 389, Value: "string($re.ReplaceAll([]byte($s), $b))"}},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, string($b))",
					SuggestTemplate: "$re.ReplaceAllString($s, string($b))",
					WhereExpr: ir.FilterExpr{
						Line: 390,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 390,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  390,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 390, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  390,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args:  []ir.FilterExpr{{Line: 390, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  390,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 390, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            395,
					SyntaxPatterns:  []ir.PatternString{{Line: 395, Value: "$re.MatchString(string($b))"}},
					ReportTemplate:  "$$ => $re.Match($b)",
					SuggestTemplate: "$re.Match($b)",
					WhereExpr: ir.FilterExpr{
						Line: 396,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  396,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 396, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  396,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 396, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            399,
					SyntaxPatterns:  []ir.PatternString{{Line: 399, Value: "$re.FindStringIndex(string($b))"}},
					ReportTemplate:  "$$ => $re.FindIndex($b)",
					SuggestTemplate: "$re.FindIndex($b)",
					WhereExpr: ir.FilterExpr{
						Line: 400,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  400,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 400, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  400,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 400, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            403,
					SyntaxPatterns:  []ir.PatternString{{Line: 403, Value: "$re.FindAllStringIndex(string($b), $n)"}},
					ReportTemplate:  "$$ => $re.FindAllIndex($b, $n)",
					SuggestTemplate: "$re.FindAllIndex($b, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 404,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  404,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 404, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  404,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 404, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            407,
					SyntaxPatterns:  []ir.PatternString{{Line: 407, Value: "[]byte($re.ReplaceAllString(string($b), string($b2)))"}},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, $b2)",
					SuggestTemplate: "$re.ReplaceAll($b, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 408,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 408,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  408,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 408, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  408,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args:  []ir.FilterExpr{{Line: 408, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  408,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 408, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            411,
					SyntaxPatterns:  []ir.PatternString{{Line: 411, Value: "[]byte($re.ReplaceAllString(string($b), $s))"}},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, []byte($s))",
					SuggestTemplate: "$re.ReplaceAll($b, []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 412,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 412,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  412,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 412, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  412,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args:  []ir.FilterExpr{{Line: 412, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  412,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 412, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        421,
			Name:        "indexAlloc",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects strings.Index()-like calls that may allocate more than they should",
			DocBefore:   "strings.Index(string(x), y)",
			DocAfter:    "bytes.Index(x, []byte(y))",
			DocNote:     "See Go issue for details: https://github.com/golang/go/issues/25864",
			Rules: []ir.Rule{
				{
					Line:            425,
					SyntaxPatterns:  []ir.PatternString{{Line: 425, Value: "strings.$f(string($b1), string($b2))"}},
					ReportTemplate:  "$$ => bytes.$f($b1, $b2)",
					SuggestTemplate: "bytes.$f($b1, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 426,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 426,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  426,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args:  []ir.FilterExpr{{Line: 426, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
									},
									{
										Line:  427,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b1\"].Type.Is(`[]byte`)",
										Value: "b1",
										Args:  []ir.FilterExpr{{Line: 427, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  427,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 427, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            430,
					SyntaxPatterns:  []ir.PatternString{{Line: 430, Value: "bytes.$f([]byte($s1), []byte($s2))"}},
					ReportTemplate:  "$$ => strings.$f($s1, $s2)",
					SuggestTemplate: "strings.$f($s1, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 431,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 431,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  431,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args:  []ir.FilterExpr{{Line: 431, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
									},
									{
										Line:  432,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s1\"].Type.Is(`string`)",
										Value: "s1",
										Args:  []ir.FilterExpr{{Line: 432, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  432,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 432, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            441,
					SyntaxPatterns:  []ir.PatternString{{Line: 441, Value: "strings.Index(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.Index($x, []byte($y))",
					SuggestTemplate: "bytes.Index($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 441,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 441,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 441,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 441, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 441, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 437,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  441,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 437, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  441,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 438, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            442,
					SyntaxPatterns:  []ir.PatternString{{Line: 442, Value: "strings.Contains(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.Contains($x, []byte($y))",
					SuggestTemplate: "bytes.Contains($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 442,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 442,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 442,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 442, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 442, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 437,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  442,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 437, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  442,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 438, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            443,
					SyntaxPatterns:  []ir.PatternString{{Line: 443, Value: "strings.HasPrefix(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($x, []byte($y))",
					SuggestTemplate: "bytes.HasPrefix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 443,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 443,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 443,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 443, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 443, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 437,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  443,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 437, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  443,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 438, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            444,
					SyntaxPatterns:  []ir.PatternString{{Line: 444, Value: "strings.HasSuffix(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($x, []byte($y))",
					SuggestTemplate: "bytes.HasSuffix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 444,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 444,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 444,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 444, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 444, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 437,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  444,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 437, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  444,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 438, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            452,
					SyntaxPatterns:  []ir.PatternString{{Line: 452, Value: "bytes.Index([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.Index($x, string($y))",
					SuggestTemplate: "strings.Index($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 452,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 452,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 452,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 452, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 452, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 448,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  452,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 448, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  452,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 449, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            453,
					SyntaxPatterns:  []ir.PatternString{{Line: 453, Value: "bytes.Contains([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.Contains($x, string($y))",
					SuggestTemplate: "strings.Contains($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 453,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 453,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 453,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 453, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 453, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 448,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  453,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 448, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  453,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 449, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            454,
					SyntaxPatterns:  []ir.PatternString{{Line: 454, Value: "bytes.HasPrefix([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.HasPrefix($x, string($y))",
					SuggestTemplate: "strings.HasPrefix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 454,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 454,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 454,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 454, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 454, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 448,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  454,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 448, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  454,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 449, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            455,
					SyntaxPatterns:  []ir.PatternString{{Line: 455, Value: "bytes.HasSuffix([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.HasSuffix($x, string($y))",
					SuggestTemplate: "strings.HasSuffix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 455,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 455,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 455,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 455, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 455, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 448,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  455,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 448, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  455,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 449, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        462,
			Name:        "writeByte",
			MatcherName: "m",
			DocTags:     []string{"o1", "score1"},
			DocSummary:  "Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead",
			DocBefore:   "w.WriteRune('\\n')",
			DocAfter:    "w.WriteByte('\\n')",
			Rules: []ir.Rule{{
				Line:            466,
				SyntaxPatterns:  []ir.PatternString{{Line: 466, Value: "$w.WriteRune($c)"}},
				ReportTemplate:  "$$ => $w.WriteByte($c)",
				SuggestTemplate: "$w.WriteByte($c)",
				WhereExpr: ir.FilterExpr{
					Line: 467,
					Op:   ir.FilterAndOp,
					Src:  "m[\"w\"].Type.HasMethod(`io.ByteWriter.WriteByte`) && (m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
					Args: []ir.FilterExpr{
						{
							Line:  467,
							Op:    ir.FilterVarTypeHasMethodOp,
							Src:   "m[\"w\"].Type.HasMethod(`io.ByteWriter.WriteByte`)",
							Value: "w",
							Args:  []ir.FilterExpr{{Line: 467, Op: ir.FilterStringOp, Src: "`io.ByteWriter.WriteByte`", Value: "io.ByteWriter.WriteByte"}},
						},
						{
							Line: 467,
							Op:   ir.FilterAndOp,
							Src:  "(m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
							Args: []ir.FilterExpr{
								{
									Line:  467,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"c\"].Const",
									Value: "c",
								},
								{
									Line: 467,
									Op:   ir.FilterLtOp,
									Src:  "m[\"c\"].Value.Int() < runeSelf",
									Args: []ir.FilterExpr{
										{
											Line:  467,
											Op:    ir.FilterVarValueIntOp,
											Src:   "m[\"c\"].Value.Int()",
											Value: "c",
										},
										{
											Line:  467,
											Op:    ir.FilterIntOp,
											Src:   "runeSelf",
											Value: int64(128),
										},
									},
								},
							},
						},
					},
				},
			}},
		},
		{
			Line:        475,
			Name:        "sliceClear",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects slice clear loops, suggests an idiom that is recognized by the Go compiler",
			DocBefore:   "for i := 0; i < len(buf); i++ { buf[i] = 0 }",
			DocAfter:    "for i := range buf { buf[i] = 0 }",
			Rules: []ir.Rule{{
				Line:            476,
				SyntaxPatterns:  []ir.PatternString{{Line: 476, Value: "for $i := 0; $i < len($xs); $i++ { $xs[$i] = $zero }"}},
				ReportTemplate:  "for ... { ... } => for $i := range $xs { $xs[$i] = $zero }",
				SuggestTemplate: "for $i := range $xs { $xs[$i] = $zero }",
				WhereExpr: ir.FilterExpr{
					Line: 477,
					Op:   ir.FilterEqOp,
					Src:  "m[\"zero\"].Value.Int() == 0",
					Args: []ir.FilterExpr{
						{
							Line:  477,
							Op:    ir.FilterVarValueIntOp,
							Src:   "m[\"zero\"].Value.Int()",
							Value: "zero",
						},
						{
							Line:  477,
							Op:    ir.FilterIntOp,
							Src:   "0",
							Value: int64(0),
						},
					},
				},
			}},
		},
		{
			Line:        487,
			Name:        "utf8DecodeRune",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation",
			DocBefore:   "r := []rune(s)[0]",
			DocAfter:    "r, _ := utf8.DecodeRuneInString(s)",
			DocNote:     "See Go issue for details: https://github.com/golang/go/issues/45260",
			Rules: []ir.Rule{
				{
					Line:            494,
					SyntaxPatterns:  []ir.PatternString{{Line: 494, Value: "$ch := []rune($s)[0]"}},
					ReportTemplate:  "$$ => $ch, _ := utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ := utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 495,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  495,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 495, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  495,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				{
					Line:            498,
					SyntaxPatterns:  []ir.PatternString{{Line: 498, Value: "$ch = []rune($s)[0]"}},
					ReportTemplate:  "$$ => $ch, _ = utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ = utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 499,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  499,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 499, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  499,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				{
					Line:           504,
					SyntaxPatterns: []ir.PatternString{{Line: 504, Value: "[]rune($s)[0]"}},
					ReportTemplate: "use utf8.DecodeRuneInString($s) here",
					WhereExpr: ir.FilterExpr{
						Line: 505,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && !m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  505,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 505, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line: 505,
								Op:   ir.FilterNotOp,
								Src:  "!m.File().Imports(`unicode/utf8`)",
								Args: []ir.FilterExpr{{
									Line:  505,
									Op:    ir.FilterFileImportsOp,
									Src:   "m.File().Imports(`unicode/utf8`)",
									Value: "unicode/utf8",
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        513,
			Name:        "fprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln)",
			DocBefore:   "w.Write([]byte(fmt.Sprintf(\"%x\", 10)))",
			DocAfter:    "fmt.Fprintf(w, \"%x\", 10)",
			Rules: []ir.Rule{
				{
					Line:            514,
					SyntaxPatterns:  []ir.PatternString{{Line: 514, Value: "$w.Write([]byte(fmt.Sprint($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  515,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 515, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            518,
					SyntaxPatterns:  []ir.PatternString{{Line: 518, Value: "$w.Write([]byte(fmt.Sprintf($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  519,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 519, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            522,
					SyntaxPatterns:  []ir.PatternString{{Line: 522, Value: "$w.Write([]byte(fmt.Sprintln($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  523,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 523, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            526,
					SyntaxPatterns:  []ir.PatternString{{Line: 526, Value: "io.WriteString($w, fmt.Sprint($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
				},
				{
					Line:            529,
					SyntaxPatterns:  []ir.PatternString{{Line: 529, Value: "io.WriteString($w, fmt.Sprintf($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
				},
				{
					Line:            532,
					SyntaxPatterns:  []ir.PatternString{{Line: 532, Value: "io.WriteString($w, fmt.Sprintln($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
				},
			},
		},
		{
			Line:        540,
			Name:        "writeString",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects w.Write calls which can be replaced with w.WriteString",
			DocBefore:   "w.Write([]byte(\"foo\"))",
			DocAfter:    "w.WriteString(\"foo\")",
			Rules: []ir.Rule{{
				Line:            541,
				SyntaxPatterns:  []ir.PatternString{{Line: 541, Value: "$w.Write([]byte($s))"}},
				ReportTemplate:  "$$ => $w.WriteString($s)",
				SuggestTemplate: "$w.WriteString($s)",
				WhereExpr: ir.FilterExpr{
					Line: 542,
					Op:   ir.FilterAndOp,
					Src:  "m[\"w\"].Type.HasMethod(\"io.StringWriter.WriteString\") && m[\"s\"].Type.Is(`string`)",
					Args: []ir.FilterExpr{
						{
							Line:  542,
							Op:    ir.FilterVarTypeHasMethodOp,
							Src:   "m[\"w\"].Type.HasMethod(\"io.StringWriter.WriteString\")",
							Value: "w",
							Args:  []ir.FilterExpr{{Line: 542, Op: ir.FilterStringOp, Src: "\"io.StringWriter.WriteString\"", Value: "io.StringWriter.WriteString"}},
						},
						{
							Line:  542,
							Op:    ir.FilterVarTypeIsOp,
							Src:   "m[\"s\"].Type.Is(`string`)",
							Value: "s",
							Args:  []ir.FilterExpr{{Line: 542, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
						},
					},
				},
			}},
		},
		{
			Line:        550,
			Name:        "writeBytes",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects w.WriteString calls which can be replaced with w.Write",
			DocBefore:   "w.WriteString(buf.String())",
			DocAfter:    "w.Write(buf.Bytes())",
			Rules: []ir.Rule{
				{
					Line:            555,
					SyntaxPatterns:  []ir.PatternString{{Line: 555, Value: "io.WriteString($w, $buf.String())"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 556,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  556,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  556,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line:            559,
					SyntaxPatterns:  []ir.PatternString{{Line: 559, Value: "io.WriteString($w, string($buf.Bytes()))"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 560,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  560,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  560,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line:            563,
					SyntaxPatterns:  []ir.PatternString{{Line: 563, Value: "$w.WriteString($buf.String())"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 564,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.HasMethod(\"io.Writer.Write\") && isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  564,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(\"io.Writer.Write\")",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 564, Op: ir.FilterStringOp, Src: "\"io.Writer.Write\"", Value: "io.Writer.Write"}},
							},
							{
								Line: 564,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  564,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  564,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 552, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
						},
					},
				},
				{
					Line:            567,
					SyntaxPatterns:  []ir.PatternString{{Line: 567, Value: "$w.WriteString(string($b))"}},
					ReportTemplate:  "$$ => $w.Write($b)",
					SuggestTemplate: "$w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line: 568,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.HasMethod(\"io.Writer.Write\") && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  568,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(\"io.Writer.Write\")",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 568, Op: ir.FilterStringOp, Src: "\"io.Writer.Write\"", Value: "io.Writer.Write"}},
							},
							{
								Line:  568,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 568, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        576,
			Name:        "bufferString",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects bytes.Buffer String() calls where Bytes() could be used instead",
			DocBefore:   "strings.Contains(buf.String(), string(b))",
			DocAfter:    "bytes.Contains(buf.Bytes(), b)",
			Rules: []ir.Rule{
				{
					Line:            581,
					SyntaxPatterns:  []ir.PatternString{{Line: 581, Value: "strings.$f($buf1.String(), $buf2.String())"}},
					ReportTemplate:  "$$ => bytes.$f($buf1.Bytes(), $buf2.Bytes())",
					SuggestTemplate: "bytes.$f($buf1.Bytes(), $buf2.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 583,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf1\"]) && isBuffer(m[\"buf2\"]) &&\n\tm[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
						Args: []ir.FilterExpr{
							{
								Line: 583,
								Op:   ir.FilterAndOp,
								Src:  "isBuffer(m[\"buf1\"]) && isBuffer(m[\"buf2\"])",
								Args: []ir.FilterExpr{
									{
										Line: 583,
										Op:   ir.FilterOrOp,
										Src:  "isBuffer(m[\"buf1\"])",
										Args: []ir.FilterExpr{
											{
												Line:  583,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf1\"].Type.Is(`bytes.Buffer`)",
												Value: "buf1",
												Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
											},
											{
												Line:  583,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf1\"].Type.Is(`*bytes.Buffer`)",
												Value: "buf1",
												Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
											},
										},
									},
									{
										Line: 583,
										Op:   ir.FilterOrOp,
										Src:  "isBuffer(m[\"buf2\"])",
										Args: []ir.FilterExpr{
											{
												Line:  583,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf2\"].Type.Is(`bytes.Buffer`)",
												Value: "buf2",
												Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
											},
											{
												Line:  583,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf2\"].Type.Is(`*bytes.Buffer`)",
												Value: "buf2",
												Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
											},
										},
									},
								},
							},
							{
								Line:  584,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 584, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
							},
						},
					},
				},
				{
					Line:            588,
					SyntaxPatterns:  []ir.PatternString{{Line: 588, Value: "strings.Contains($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 589,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 589,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  589,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  589,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  589,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 589, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            591,
					SyntaxPatterns:  []ir.PatternString{{Line: 591, Value: "strings.HasPrefix($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 592,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 592,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  592,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  592,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  592,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 592, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            594,
					SyntaxPatterns:  []ir.PatternString{{Line: 594, Value: "strings.HasSuffix($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 595,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 595,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  595,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  595,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  595,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 595, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            597,
					SyntaxPatterns:  []ir.PatternString{{Line: 597, Value: "strings.Count($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Count($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 598,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 598,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  598,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  598,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  598,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 598, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            600,
					SyntaxPatterns:  []ir.PatternString{{Line: 600, Value: "strings.Index($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Index($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Index($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 601,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 601,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  601,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  601,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  601,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 601, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            603,
					SyntaxPatterns:  []ir.PatternString{{Line: 603, Value: "strings.EqualFold($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.EqualFold($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.EqualFold($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 604,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 604,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  604,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  604,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  604,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 604, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            607,
					SyntaxPatterns:  []ir.PatternString{{Line: 607, Value: "strings.Contains($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 608,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 608,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  608,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  608,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  608,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 608, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            610,
					SyntaxPatterns:  []ir.PatternString{{Line: 610, Value: "strings.HasPrefix($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 611,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 611,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  611,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  611,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  611,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 611, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            613,
					SyntaxPatterns:  []ir.PatternString{{Line: 613, Value: "strings.HasSuffix($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 614,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 614,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  614,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  614,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  614,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 614, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            616,
					SyntaxPatterns:  []ir.PatternString{{Line: 616, Value: "strings.Count($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Count($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 617,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 617,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  617,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  617,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  617,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 617, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            619,
					SyntaxPatterns:  []ir.PatternString{{Line: 619, Value: "strings.Index($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Index($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Index($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 620,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 620,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  620,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  620,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  620,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 620, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            622,
					SyntaxPatterns:  []ir.PatternString{{Line: 622, Value: "strings.EqualFold($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.EqualFold($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.EqualFold($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 623,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 623,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  623,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  623,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  623,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 623, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            626,
					SyntaxPatterns:  []ir.PatternString{{Line: 626, Value: "[]byte($buf.String())"}},
					ReportTemplate:  "$$ => $buf.Bytes()",
					SuggestTemplate: "$buf.Bytes()",
					WhereExpr: ir.FilterExpr{
						Line: 626,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  626,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  626,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line: 628,
					SyntaxPatterns: []ir.PatternString{
						{Line: 628, Value: "fmt.Fprint($w, $buf.String())"},
						{Line: 628, Value: "fmt.Fprintf($w, \"%s\", $buf.String())"},
						{Line: 628, Value: "fmt.Fprintf($w, \"%v\", $buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 629,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  629,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  629,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 578, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        635,
			Name:        "rangeExprCopy",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects array range loops that result in an excessive full data copy",
			Rules: []ir.Rule{
				{
					Line: 636,
					SyntaxPatterns: []ir.PatternString{
						{Line: 636, Value: "for $_, $_ := range $e"},
						{Line: 636, Value: "for $_, $_ = range $e"},
					},
					ReportTemplate:  "$e => &$e",
					SuggestTemplate: "&$e",
					WhereExpr: ir.FilterExpr{
						Line: 637,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							{
								Line: 637,
								Op:   ir.FilterAndOp,
								Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`)",
								Args: []ir.FilterExpr{
									{
										Line:  637,
										Op:    ir.FilterVarAddressableOp,
										Src:   "m[\"e\"].Addressable",
										Value: "e",
									},
									{
										Line:  637,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
										Value: "e",
										Args:  []ir.FilterExpr{{Line: 637, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"}},
									},
								},
							},
							{
								Line: 637,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									{
										Line:  637,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									{
										Line:  637,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
				{
					Line: 643,
					SyntaxPatterns: []ir.PatternString{
						{Line: 643, Value: "for $_, $_ := range $e"},
						{Line: 643, Value: "for $_, $_ = range $e"},
					},
					ReportTemplate: "range over big array value expression is ineffective",
					WhereExpr: ir.FilterExpr{
						Line: 644,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							{
								Line:  644,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
								Value: "e",
								Args:  []ir.FilterExpr{{Line: 644, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"}},
							},
							{
								Line: 644,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									{
										Line:  644,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									{
										Line:  644,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
			},
		},
		{
			Line:        651,
			Name:        "rangeToAppend",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects range loops that can be turned into a single append call",
			Rules: []ir.Rule{{
				Line:            652,
				SyntaxPatterns:  []ir.PatternString{{Line: 652, Value: "for $_, $x := range $src { $dst = append($dst, $x) }"}},
				ReportTemplate:  "for ... { ... } => $dst = append($dst, $src...)",
				SuggestTemplate: "$dst = append($dst, $src...)",
				WhereExpr: ir.FilterExpr{
					Line:  653,
					Op:    ir.FilterVarTypeIsOp,
					Src:   "m[\"src\"].Type.Is(`[]$_`)",
					Value: "src",
					Args:  []ir.FilterExpr{{Line: 653, Op: ir.FilterStringOp, Src: "`[]$_`", Value: "[]$_"}},
				},
			}},
		},
		{
			Line:        660,
			Name:        "rangeRuneSlice",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects a range over []rune(string) where copying to a new slice is redundant",
			Rules: []ir.Rule{
				{
					Line:            661,
					SyntaxPatterns:  []ir.PatternString{{Line: 661, Value: "for _, $r := range []rune($s)"}},
					ReportTemplate:  "$$ => for _, $r := range $s",
					SuggestTemplate: "for _, $r := range $s",
					WhereExpr: ir.FilterExpr{
						Line:  662,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 662, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            665,
					SyntaxPatterns:  []ir.PatternString{{Line: 665, Value: "for _, $r = range []rune($s)"}},
					ReportTemplate:  "$$ => for _, $r = range $s",
					SuggestTemplate: "for _, $r = range $s",
					WhereExpr: ir.FilterExpr{
						Line:  666,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 666, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            669,
					SyntaxPatterns:  []ir.PatternString{{Line: 669, Value: "for range []rune($s)"}},
					ReportTemplate:  "$$ => for range $s",
					SuggestTemplate: "for range $s",
					WhereExpr: ir.FilterExpr{
						Line:  670,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 670, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            673,
					SyntaxPatterns:  []ir.PatternString{{Line: 673, Value: "for _, $r := range string($runes)"}},
					ReportTemplate:  "$$ => for _, $r := range $runes",
					SuggestTemplate: "for _, $r := range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  674,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args:  []ir.FilterExpr{{Line: 674, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"}},
					},
				},
				{
					Line:            677,
					SyntaxPatterns:  []ir.PatternString{{Line: 677, Value: "for _, $r = range string($runes)"}},
					ReportTemplate:  "$$ => for _, $r = range $runes",
					SuggestTemplate: "for _, $r = range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  678,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args:  []ir.FilterExpr{{Line: 678, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"}},
					},
				},
			},
		},
		{
			Line:        684,
			Name:        "reflectDeepEqual",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects usages of reflect.DeepEqual that can be rewritten",
			Rules: []ir.Rule{
				{
					Line:            685,
					SyntaxPatterns:  []ir.PatternString{{Line: 685, Value: "reflect.DeepEqual($x, $y)"}},
					ReportTemplate:  "$$ => bytes.Equal($x, $y)",
					SuggestTemplate: "bytes.Equal($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 686,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`[]byte`) && m[\"y\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  686,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 686, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  686,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`[]byte`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 686, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            693,
					SyntaxPatterns:  []ir.PatternString{{Line: 693, Value: "reflect.DeepEqual($x, $y)"}},
					ReportTemplate:  "$$ => ($x == $y)",
					SuggestTemplate: "($x == $y)",
					WhereExpr: ir.FilterExpr{
						Line: 694,
						Op:   ir.FilterOrOp,
						Src:  "(m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)) ||\n\t(m[\"x\"].Type.OfKind(`numeric`) && m[\"y\"].Type.OfKind(`numeric`))",
						Args: []ir.FilterExpr{
							{
								Line: 694,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`))",
								Args: []ir.FilterExpr{
									{
										Line:  694,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"x\"].Type.Is(`string`)",
										Value: "x",
										Args:  []ir.FilterExpr{{Line: 694, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
									{
										Line:  694,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"y\"].Type.Is(`string`)",
										Value: "y",
										Args:  []ir.FilterExpr{{Line: 694, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line: 695,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"x\"].Type.OfKind(`numeric`) && m[\"y\"].Type.OfKind(`numeric`))",
								Args: []ir.FilterExpr{
									{
										Line:  695,
										Op:    ir.FilterVarTypeOfKindOp,
										Src:   "m[\"x\"].Type.OfKind(`numeric`)",
										Value: "x",
										Args:  []ir.FilterExpr{{Line: 695, Op: ir.FilterStringOp, Src: "`numeric`", Value: "numeric"}},
									},
									{
										Line:  695,
										Op:    ir.FilterVarTypeOfKindOp,
										Src:   "m[\"y\"].Type.OfKind(`numeric`)",
										Value: "y",
										Args:  []ir.FilterExpr{{Line: 695, Op: ir.FilterStringOp, Src: "`numeric`", Value: "numeric"}},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			Line:        701,
			Name:        "reflectType",
			MatcherName: "m",
			DocTags:     []string{"o1", "score1"},
			DocSummary:  "Detects reflect Type() related patterns that can be optimized",
			Rules: []ir.Rule{
				{
					Line:            702,
					SyntaxPatterns:  []ir.PatternString{{Line: 702, Value: "reflect.ValueOf($x).Type()"}},
					ReportTemplate:  "$$ => reflect.TypeOf($x)",
					SuggestTemplate: "reflect.TypeOf($x)",
				},
				{
					Line:            704,
					SyntaxPatterns:  []ir.PatternString{{Line: 704, Value: "reflect.TypeOf($x.Interface())"}},
					ReportTemplate:  "$$ => $x.Type()",
					SuggestTemplate: "$x.Type()",
					WhereExpr: ir.FilterExpr{
						Line:  705,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`reflect.Value`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 705, Op: ir.FilterStringOp, Src: "`reflect.Value`", Value: "reflect.Value"}},
					},
				},
				{
					Line:            708,
					SyntaxPatterns:  []ir.PatternString{{Line: 708, Value: "fmt.Sprintf(\"%T\", $x.Interface())"}},
					ReportTemplate:  "$$ => $x.Type().String()",
					SuggestTemplate: "$x.Type().String()",
					WhereExpr: ir.FilterExpr{
						Line:  709,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`reflect.Value`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 709, Op: ir.FilterStringOp, Src: "`reflect.Value`", Value: "reflect.Value"}},
					},
				},
				{
					Line:            711,
					SyntaxPatterns:  []ir.PatternString{{Line: 711, Value: "fmt.Sprintf(\"%T\", $x)"}},
					ReportTemplate:  "$$ => reflect.TypeOf($x).String()",
					SuggestTemplate: "reflect.TypeOf($x).String()",
				},
			},
		},
		{
			Line:        717,
			Name:        "binaryWrite",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects binary.Write uses that can be optimized",
			Rules: []ir.Rule{
				{
					Line:            718,
					SyntaxPatterns:  []ir.PatternString{{Line: 718, Value: "$err := binary.Write($w, $_, $b)"}},
					ReportTemplate:  "$$ => _, $err := $w.Write($b)",
					SuggestTemplate: "_, $err := $w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line:  719,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 719, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            722,
					SyntaxPatterns:  []ir.PatternString{{Line: 722, Value: "binary.Write($w, $_, $b)"}},
					ReportTemplate:  "$$ => $w.Write($b)",
					SuggestTemplate: "$w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line: 723,
						Op:   ir.FilterAndOp,
						Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 723,
								Op:   ir.FilterRootNodeParentIsOp,
								Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`)",
								Args: []ir.FilterExpr{{Line: 723, Op: ir.FilterStringOp, Src: "`ExprStmt`", Value: "ExprStmt"}},
							},
							{
								Line:  723,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 723, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            726,
					SyntaxPatterns:  []ir.PatternString{{Line: 726, Value: "$err := binary.Write($w, $_, $s)"}},
					ReportTemplate:  "$$ => _, $err := $w.WriteString($s)",
					SuggestTemplate: "_, $err := $w.WriteString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 727,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m[\"w\"].Type.HasMethod(`io.StringWriter.WriteString`)",
						Args: []ir.FilterExpr{
							{
								Line:  727,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 727, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  727,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(`io.StringWriter.WriteString`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 727, Op: ir.FilterStringOp, Src: "`io.StringWriter.WriteString`", Value: "io.StringWriter.WriteString"}},
							},
						},
					},
				},
				{
					Line:            730,
					SyntaxPatterns:  []ir.PatternString{{Line: 730, Value: "binary.Write($w, $_, $s)"}},
					ReportTemplate:  "$$ => $w.WriteString($s)",
					SuggestTemplate: "$w.WriteString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 731,
						Op:   ir.FilterAndOp,
						Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`) && m[\"s\"].Type.Is(`string`) && m[\"w\"].Type.HasMethod(`io.StringWriter.WriteString`)",
						Args: []ir.FilterExpr{
							{
								Line: 731,
								Op:   ir.FilterAndOp,
								Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line: 731,
										Op:   ir.FilterRootNodeParentIsOp,
										Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`)",
										Args: []ir.FilterExpr{{Line: 731, Op: ir.FilterStringOp, Src: "`ExprStmt`", Value: "ExprStmt"}},
									},
									{
										Line:  731,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args:  []ir.FilterExpr{{Line: 731, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  731,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(`io.StringWriter.WriteString`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 731, Op: ir.FilterStringOp, Src: "`io.StringWriter.WriteString`", Value: "io.StringWriter.WriteString"}},
							},
						},
					},
				},
			},
		},
	},
}

