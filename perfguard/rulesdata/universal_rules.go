// Code generated by "precompile.go". DO NOT EDIT.

package rulesdata

import "github.com/quasilyte/go-ruleguard/ruleguard/ir"

var Universal = &ir.File{
	PkgPath:       "gorules",
	CustomDecls:   []string{},
	BundleImports: []ir.BundleImport{},
	RuleGroups: []ir.RuleGroup{
		ir.RuleGroup{
			Line:        27,
			Name:        "stringsCut",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects use cases for strings.Cut",
			DocBefore:  "email := strings.Split(s, \"@\")[0]",
			DocAfter:   "email, _, _ := strings.Cut(s, \"@\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 28,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 28, Value: "$dst := strings.Split($s, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ := strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ := strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  29,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				ir.Rule{
					Line: 31,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 31, Value: "$dst = strings.Split($s, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ = strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ = strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  32,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        40,
			Name:        "bytesCut",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects use cases for bytes.Cut",
			DocBefore:  "email := bytes.Split(b, \"@\")[0]",
			DocAfter:   "email, _, _ := bytes.Cut(b, []byte(\"@\"))",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 41,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 41, Value: "$dst := bytes.Split($b, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ := bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ := bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  42,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				ir.Rule{
					Line: 44,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 44, Value: "$dst = bytes.Split($b, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ = bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ = bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  45,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        53,
			Name:        "stringsClone",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects use cases for strings.Clone",
			DocBefore:  "s2 := string([]byte(s1))",
			DocAfter:   "s2 := strings.Clone(s1)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 54,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 54, Value: "string([]byte($s))"},
					},
					ReportTemplate:  "$$ => strings.Clone($s)",
					SuggestTemplate: "strings.Clone($s)",
					WhereExpr: ir.FilterExpr{
						Line: 55,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const &&\n\tm.GoVersion().GreaterEqThan(\"1.18\")",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 55,
								Op:   ir.FilterAndOp,
								Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  55,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 55, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
									ir.FilterExpr{
										Line: 56,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"s\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  56,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"s\"].Const",
												Value: "s",
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  57,
								Op:    ir.FilterGoVersionGreaterEqThanOp,
								Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
								Value: "1.18",
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        65,
			Name:        "equalFold",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects unoptimal strings/bytes case-insensitive comparison",
			DocBefore:  "strings.ToLower(x) == strings.ToLower(y)",
			DocAfter:   "strings.EqualFold(x, y)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 67,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 68, Value: "strings.ToLower($x) == $y"},
						ir.PatternString{Line: 69, Value: "strings.ToLower($x) == strings.ToLower($y)"},
						ir.PatternString{Line: 70, Value: "$x == strings.ToLower($y)"},
						ir.PatternString{Line: 71, Value: "strings.ToUpper($x) == $y"},
						ir.PatternString{Line: 72, Value: "strings.ToUpper($x) == strings.ToUpper($y)"},
						ir.PatternString{Line: 73, Value: "$x == strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => strings.EqualFold($x, $y)",
					SuggestTemplate: "strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 74,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 74,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 74, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 74, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 74,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 74, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 74, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 78,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 79, Value: "strings.ToLower($x) != $y"},
						ir.PatternString{Line: 80, Value: "strings.ToLower($x) != strings.ToLower($y)"},
						ir.PatternString{Line: 81, Value: "$x != strings.ToLower($y)"},
						ir.PatternString{Line: 82, Value: "strings.ToUpper($x) != $y"},
						ir.PatternString{Line: 83, Value: "strings.ToUpper($x) != strings.ToUpper($y)"},
						ir.PatternString{Line: 84, Value: "$x != strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => !strings.EqualFold($x, $y)",
					SuggestTemplate: "!strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 85,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 85,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 85, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 85, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 85,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 85, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 85, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 89,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 90, Value: "bytes.Equal(bytes.ToLower($x), $y)"},
						ir.PatternString{Line: 91, Value: "bytes.Equal(bytes.ToLower($x), bytes.ToLower($y))"},
						ir.PatternString{Line: 92, Value: "bytes.Equal($x, bytes.ToLower($y))"},
						ir.PatternString{Line: 93, Value: "bytes.Equal(bytes.ToUpper($x), $y)"},
						ir.PatternString{Line: 94, Value: "bytes.Equal(bytes.ToUpper($x), bytes.ToUpper($y))"},
						ir.PatternString{Line: 95, Value: "bytes.Equal($x, bytes.ToUpper($y))"},
					},
					ReportTemplate:  "$$ => bytes.EqualFold($x, $y)",
					SuggestTemplate: "bytes.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 96,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 96,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 96, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 96, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 96,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 96, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 96, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        102,
			Name:        "redundantSprint",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects redundant fmt.Sprint calls",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 103,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 103, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 103, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 103, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.String()",
					SuggestTemplate: "$x.String()",
					WhereExpr: ir.FilterExpr{
						Line:  104,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 104, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
						},
					},
				},
				ir.Rule{
					Line: 107,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 107, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 107, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 107, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.Error()",
					SuggestTemplate: "$x.Error()",
					WhereExpr: ir.FilterExpr{
						Line:  108,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`error`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 108, Op: ir.FilterStringOp, Src: "`error`", Value: "error"},
						},
					},
				},
				ir.Rule{
					Line: 111,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 111, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 111, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 111, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x",
					SuggestTemplate: "$x",
					WhereExpr: ir.FilterExpr{
						Line:  112,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`string`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 112, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 115,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 115, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 115, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 115, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => string($x)",
					SuggestTemplate: "string($x)",
					WhereExpr: ir.FilterExpr{
						Line: 116,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.ConvertibleTo(`string`) && !m[\"x\"].Type.OfKind(\"numeric\")",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  116,
								Op:    ir.FilterVarTypeConvertibleToOp,
								Src:   "m[\"x\"].Type.ConvertibleTo(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 116, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line: 116,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Type.OfKind(\"numeric\")",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  116,
										Op:    ir.FilterVarTypeOfKindOp,
										Src:   "m[\"x\"].Type.OfKind(\"numeric\")",
										Value: "x",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 116, Op: ir.FilterStringOp, Src: "\"numeric\"", Value: "numeric"},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        124,
			Name:        "sliceClone",
			MatcherName: "m",
			DocTags: []string{
				"o2",
			},
			DocSummary: "Detects slice copying patterns that can be optimized",
			DocBefore:  "dst := append([]int(nil), src...)",
			DocAfter:   "dst := make([]int, len(src)); copy(dst, src)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 125,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 125, Value: "$dst = append([]$elem(nil), $src...)"},
						ir.PatternString{Line: 125, Value: "$dst = append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst = make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst = make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 126,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  126,
								Op:    ir.FilterVarTypeHasPointersOp,
								Src:   "m[\"elem\"].Type.HasPointers()",
								Value: "elem",
							},
						},
					},
				},
				ir.Rule{
					Line: 128,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 128, Value: "$dst := append([]$elem(nil), $src...)"},
						ir.PatternString{Line: 128, Value: "$dst := append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst := make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst := make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 129,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  129,
								Op:    ir.FilterVarTypeHasPointersOp,
								Src:   "m[\"elem\"].Type.HasPointers()",
								Value: "elem",
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        135,
			Name:        "stringsJoinConcat",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detect strings.Join usages that can be rewritten as a string concat",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 136,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 136, Value: "strings.Join([]string{$x, $y}, \"\")"},
					},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 137,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 137,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  137,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"x\"].Const",
										Value: "x",
									},
								},
							},
							ir.FilterExpr{
								Line: 137,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  137,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"y\"].Const",
										Value: "y",
									},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 139,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 139, Value: "strings.Join([]string{$x, $y, $z}, \"\")"},
					},
					ReportTemplate:  "$$ => $x + $y + $z",
					SuggestTemplate: "$x + $y + $z",
					WhereExpr: ir.FilterExpr{
						Line: 140,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 140,
								Op:   ir.FilterAndOp,
								Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 140,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"x\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  140,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"x\"].Const",
												Value: "x",
											},
										},
									},
									ir.FilterExpr{
										Line: 140,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  140,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"y\"].Const",
												Value: "y",
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line: 140,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  140,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"z\"].Const",
										Value: "z",
									},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 143,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 143, Value: "strings.Join([]string{$x, $y}, $glue)"},
					},
					ReportTemplate:  "$$ => $x + $glue + $y",
					SuggestTemplate: "$x + $glue + $y",
					WhereExpr: ir.FilterExpr{
						Line: 144,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 144,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  144,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"x\"].Const",
										Value: "x",
									},
								},
							},
							ir.FilterExpr{
								Line: 144,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  144,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"y\"].Const",
										Value: "y",
									},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 147,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 147, Value: "strings.Join([]string{$x, $y, $z}, $glue)"},
					},
					ReportTemplate:  "$$ => $x + $glue + $y + $glue + $z",
					SuggestTemplate: "$x + $glue + $y + $glue + $z",
					WhereExpr: ir.FilterExpr{
						Line: 148,
						Op:   ir.FilterAndOp,
						Src:  "m[\"glue\"].Pure && !m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 148,
								Op:   ir.FilterAndOp,
								Src:  "m[\"glue\"].Pure && !m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 148,
										Op:   ir.FilterAndOp,
										Src:  "m[\"glue\"].Pure && !m[\"x\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 148, Op: ir.FilterVarPureOp, Src: "m[\"glue\"].Pure", Value: "glue"},
											ir.FilterExpr{
												Line: 148,
												Op:   ir.FilterNotOp,
												Src:  "!m[\"x\"].Const",
												Args: []ir.FilterExpr{
													ir.FilterExpr{
														Line:  148,
														Op:    ir.FilterVarConstOp,
														Src:   "m[\"x\"].Const",
														Value: "x",
													},
												},
											},
										},
									},
									ir.FilterExpr{
										Line: 148,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  148,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"y\"].Const",
												Value: "y",
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line: 148,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  148,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"z\"].Const",
										Value: "z",
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        156,
			Name:        "sprintConcat",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects sprint calls that can be rewritten as a string concat",
			DocBefore:  "fmt.Sprintf(\"%s%s\", x, y)",
			DocAfter:   "x + y",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 157,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 157, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"},
					},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 158,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  158,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 158, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  158,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`string`)",
								Value: "y",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 158, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 161,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 161, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"},
					},
					ReportTemplate:  "$$ => $x.String() + $y.String()",
					SuggestTemplate: "$x.String() + $y.String()",
					WhereExpr: ir.FilterExpr{
						Line: 162,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"y\"].Type.Implements(`fmt.Stringer`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  162,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 162, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
								},
							},
							ir.FilterExpr{
								Line:  162,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"y\"].Type.Implements(`fmt.Stringer`)",
								Value: "y",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 162, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        170,
			Name:        "strconv",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects fmt uses that can be replaced with strconv",
			DocBefore:  "fmt.Sprintf(\"%d\", i)",
			DocAfter:   "strconv.Itoa(i)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 174,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 174, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 174, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 174, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.Itoa($x)",
					SuggestTemplate: "strconv.Itoa($x)",
					WhereExpr: ir.FilterExpr{
						Line:  175,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 175, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 179,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 179, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 179, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 179, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 10)",
					SuggestTemplate: "strconv.FormatInt($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  180,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 180, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"},
						},
					},
				},
				ir.Rule{
					Line: 181,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 181, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 16)",
					SuggestTemplate: "strconv.FormatInt($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  182,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 182, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"},
						},
					},
				},
				ir.Rule{
					Line: 183,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 183, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 183, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 183, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 10)",
					SuggestTemplate: "strconv.FormatUint($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  184,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 184, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"},
						},
					},
				},
				ir.Rule{
					Line: 185,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 185, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 16)",
					SuggestTemplate: "strconv.FormatUint($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  186,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 186, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"},
						},
					},
				},
				ir.Rule{
					Line: 188,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 188, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 188, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 188, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 10)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  189,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 189, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 190,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 190, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 16)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  191,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 191, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 193,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 193, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 193, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 193, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 10)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  194,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 194, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"},
						},
					},
				},
				ir.Rule{
					Line: 195,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 195, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 16)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  196,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 196, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        203,
			Name:        "appendAPI",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects cases that can benefit from append-friendly APIs",
			DocBefore:  "b = append(b, strconv.Itoa(v)...)",
			DocAfter:   "b = strconv.AppendInt(b, v, 10)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 211,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 211, Value: "$b = append($b, strconv.Itoa($x)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, int64($x), 10)",
					SuggestTemplate: "$b = strconv.AppendInt($b, int64($x), 10)",
				},
				ir.Rule{
					Line: 213,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 213, Value: "$b = append($b, strconv.FormatInt($x, $base)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendInt($b, $x, $base)",
				},
				ir.Rule{
					Line: 215,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 215, Value: "$b = append($b, strconv.FormatUint($x, $base)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendUint($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendUint($b, $x, $base)",
				},
				ir.Rule{
					Line: 218,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 218, Value: "$b = append($b, $t.Format($layout)...)"},
					},
					ReportTemplate:  "$$ => $b = $t.AppendFormat($b, $layout)",
					SuggestTemplate: "$b = $t.AppendFormat($b, $layout)",
					WhereExpr: ir.FilterExpr{
						Line: 219,
						Op:   ir.FilterOrOp,
						Src:  "m[\"t\"].Type.Is(`time.Time`) || m[\"t\"].Type.Is(`*time.Time`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  219,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`time.Time`)",
								Value: "t",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 219, Op: ir.FilterStringOp, Src: "`time.Time`", Value: "time.Time"},
								},
							},
							ir.FilterExpr{
								Line:  219,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`*time.Time`)",
								Value: "t",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 219, Op: ir.FilterStringOp, Src: "`*time.Time`", Value: "*time.Time"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 222,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 222, Value: "$b = append($b, $v.String()...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, 'g', 10)",
					SuggestTemplate: "$b = $v.Append($b, 'g', 10)",
					WhereExpr: ir.FilterExpr{
						Line: 223,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  223,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 223, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"},
								},
							},
							ir.FilterExpr{
								Line:  223,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 223, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 225,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 225, Value: "$b = append($b, $v.Text($format, $prec)...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, $format, $prec)",
					SuggestTemplate: "$b = $v.Append($b, $format, $prec)",
					WhereExpr: ir.FilterExpr{
						Line: 226,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  226,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 226, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"},
								},
							},
							ir.FilterExpr{
								Line:  226,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 226, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 229,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 229, Value: "$b = append($b, $v.String()...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, 10)",
					SuggestTemplate: "$b = $v.Append($b, 10)",
					WhereExpr: ir.FilterExpr{
						Line: 230,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  230,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 230, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"},
								},
							},
							ir.FilterExpr{
								Line:  230,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 230, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 232,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 232, Value: "$b = append($b, $v.Text($base)...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, $base)",
					SuggestTemplate: "$b = $v.Append($b, $base)",
					WhereExpr: ir.FilterExpr{
						Line: 233,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  233,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 233, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"},
								},
							},
							ir.FilterExpr{
								Line:  233,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 233, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        241,
			Name:        "convReorder",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects patterns that can be reordered to make the code faster",
			DocBefore:  "strings.TrimSpace(string(b))",
			DocAfter:   "string(bytes.TrimSpace(b))",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 247,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 247, Value: "strings.TrimSpace(string($b))"},
					},
					ReportTemplate:  "$$ => string(bytes.TrimSpace($b))",
					SuggestTemplate: "string(bytes.TrimSpace($b))",
					WhereExpr: ir.FilterExpr{
						Line:  248,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 248, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
						},
					},
				},
				ir.Rule{
					Line: 251,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 251, Value: "bytes.TrimSpace([]byte($s))"},
					},
					ReportTemplate:  "$$ => []byte(strings.TrimSpace($s))",
					SuggestTemplate: "[]byte(strings.TrimSpace($s))",
					WhereExpr: ir.FilterExpr{
						Line:  252,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 252, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        260,
			Name:        "stringCopyElim",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects redundant conversions between string and []byte",
			DocBefore:  "copy(b, []byte(s))",
			DocAfter:   "copy(b, s)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 261,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 261, Value: "copy($b, []byte($s))"},
					},
					ReportTemplate:  "$$ => copy($b, $s)",
					SuggestTemplate: "copy($b, $s)",
					WhereExpr: ir.FilterExpr{
						Line:  262,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 262, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 265,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 265, Value: "append($b, []byte($s)...)"},
					},
					ReportTemplate:  "$$ => append($b, $s...)",
					SuggestTemplate: "append($b, $s...)",
					WhereExpr: ir.FilterExpr{
						Line:  266,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 266, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 269,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 269, Value: "len(string($b))"},
					},
					ReportTemplate:  "$$ => len($b)",
					SuggestTemplate: "len($b)",
					WhereExpr: ir.FilterExpr{
						Line:  269,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 269, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
						},
					},
				},
				ir.Rule{
					Line: 271,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 271, Value: "[]byte(strings.$f(string($b)))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b)",
					SuggestTemplate: "bytes.$f($b)",
					WhereExpr: ir.FilterExpr{
						Line: 272,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  272,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 272, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
							ir.FilterExpr{
								Line:  273,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
								Value: "f",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 273, Op: ir.FilterStringOp, Src: "`ToUpper|ToLower|TrimSpace`", Value: "ToUpper|ToLower|TrimSpace"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 276,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 276, Value: "[]byte(strings.$f(string($b), $s2))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b, []byte($s2))",
					SuggestTemplate: "bytes.$f($b, []byte($s2))",
					WhereExpr: ir.FilterExpr{
						Line: 277,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  277,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 277, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
							ir.FilterExpr{
								Line:  278,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
								Value: "f",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 278, Op: ir.FilterStringOp, Src: "`TrimPrefix|TrimSuffix`", Value: "TrimPrefix|TrimSuffix"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        286,
			Name:        "regexpStringCopyElim",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects inefficient regexp usage in regard to string/[]byte conversions",
			DocBefore:  "regexp.ReplaceAll([]byte(s), []byte(\"foo\"))",
			DocAfter:   "regexp.ReplaceAllString(s, \"foo\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 289,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 289, Value: "$re.Match([]byte($s))"},
					},
					ReportTemplate:  "$$ => $re.MatchString($s)",
					SuggestTemplate: "$re.MatchString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 290,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  290,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 290, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  290,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 290, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 293,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 293, Value: "$re.FindIndex([]byte($s))"},
					},
					ReportTemplate:  "$$ => $re.FindStringIndex($s)",
					SuggestTemplate: "$re.FindStringIndex($s)",
					WhereExpr: ir.FilterExpr{
						Line: 294,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  294,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 294, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  294,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 294, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 297,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 297, Value: "$re.FindAllIndex([]byte($s), $n)"},
					},
					ReportTemplate:  "$$ => $re.FindAllStringIndex($s, $n)",
					SuggestTemplate: "$re.FindAllStringIndex($s, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 298,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  298,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 298, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  298,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 298, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 301,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 301, Value: "string($re.ReplaceAll([]byte($s), []byte($s2)))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, $s2)",
					SuggestTemplate: "$re.ReplaceAllString($s, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 302,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 302,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  302,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 302, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  302,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 302, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  302,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 302, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 305,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 305, Value: "string($re.ReplaceAll([]byte($s), $b))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, string($b))",
					SuggestTemplate: "$re.ReplaceAllString($s, string($b))",
					WhereExpr: ir.FilterExpr{
						Line: 306,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 306,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  306,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 306, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  306,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 306, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  306,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 306, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 311,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 311, Value: "$re.MatchString(string($b))"},
					},
					ReportTemplate:  "$$ => $re.Match($b)",
					SuggestTemplate: "$re.Match($b)",
					WhereExpr: ir.FilterExpr{
						Line: 312,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  312,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 312, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  312,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 312, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 315,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 315, Value: "$re.FindStringIndex(string($b))"},
					},
					ReportTemplate:  "$$ => $re.FindIndex($b)",
					SuggestTemplate: "$re.FindIndex($b)",
					WhereExpr: ir.FilterExpr{
						Line: 316,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  316,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 316, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  316,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 316, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 319,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 319, Value: "$re.FindAllStringIndex(string($b), $n)"},
					},
					ReportTemplate:  "$$ => $re.FindAllIndex($b, $n)",
					SuggestTemplate: "$re.FindAllIndex($b, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 320,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  320,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 320, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  320,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 320, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 323,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 323, Value: "[]byte($re.ReplaceAllString(string($b), string($b2)))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, $b2)",
					SuggestTemplate: "$re.ReplaceAll($b, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 324,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 324,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  324,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 324, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  324,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 324, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  324,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 324, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 327,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 327, Value: "[]byte($re.ReplaceAllString(string($b), $s))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, []byte($s))",
					SuggestTemplate: "$re.ReplaceAll($b, []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 328,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 328,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  328,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 328, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  328,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 328, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  328,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 328, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        337,
			Name:        "indexAlloc",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects strings.Index()-like calls that may allocate more than they should",
			DocBefore:  "strings.Index(string(x), y)",
			DocAfter:   "bytes.Index(x, []byte(y))",
			DocNote:    "See Go issue for details: https://github.com/golang/go/issues/25864",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 341,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 341, Value: "strings.$f(string($b1), string($b2))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b1, $b2)",
					SuggestTemplate: "bytes.$f($b1, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 342,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 342,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  342,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 342, Op: ir.FilterStringOp, Src: "`Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Contains|HasPrefix|HasSuffix|EqualFold"},
										},
									},
									ir.FilterExpr{
										Line:  343,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b1\"].Type.Is(`[]byte`)",
										Value: "b1",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 343, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  343,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 343, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 346,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 346, Value: "bytes.$f([]byte($s1), []byte($s2))"},
					},
					ReportTemplate:  "$$ => strings.$f($s1, $s2)",
					SuggestTemplate: "strings.$f($s1, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 347,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 347,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  347,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 347, Op: ir.FilterStringOp, Src: "`Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Contains|HasPrefix|HasSuffix|EqualFold"},
										},
									},
									ir.FilterExpr{
										Line:  348,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s1\"].Type.Is(`string`)",
										Value: "s1",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  348,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 357,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 357, Value: "strings.Index(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.Index($x, []byte($y))",
					SuggestTemplate: "bytes.Index($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 357,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 357,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 357,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 357, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 357, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 353,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  357,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 353, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  357,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 354, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 358,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 358, Value: "strings.Contains(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.Contains($x, []byte($y))",
					SuggestTemplate: "bytes.Contains($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 358,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 358,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 358,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 358, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 358, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 353,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  358,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 353, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  358,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 354, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 359,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 359, Value: "strings.HasPrefix(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($x, []byte($y))",
					SuggestTemplate: "bytes.HasPrefix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 359,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 359,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 359,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 359, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 359, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 353,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  359,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 353, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  359,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 354, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 360,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 360, Value: "strings.HasSuffix(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($x, []byte($y))",
					SuggestTemplate: "bytes.HasSuffix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 360,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 360,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 360,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 360, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 360, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 353,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  360,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 353, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  360,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 354, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 368,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 368, Value: "bytes.Index([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.Index($x, string($y))",
					SuggestTemplate: "strings.Index($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 368,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 368,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 368,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 368, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 368, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 364,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  368,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 364, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  368,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 365, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 369,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 369, Value: "bytes.Contains([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.Contains($x, string($y))",
					SuggestTemplate: "strings.Contains($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 369,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 369,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 369,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 369, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 369, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 364,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  369,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 364, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  369,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 365, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 370,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 370, Value: "bytes.HasPrefix([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.HasPrefix($x, string($y))",
					SuggestTemplate: "strings.HasPrefix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 370,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 370,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 370,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 370, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 370, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 364,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  370,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 364, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  370,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 365, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 371,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 371, Value: "bytes.HasSuffix([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.HasSuffix($x, string($y))",
					SuggestTemplate: "strings.HasSuffix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 371,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 371,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 371,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 371, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 371, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 364,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  371,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 364, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  371,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 365, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        378,
			Name:        "writeByte",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead",
			DocBefore:  "w.WriteRune('\\n')",
			DocAfter:   "w.WriteByte('\\n')",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 382,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 382, Value: "$w.WriteRune($c)"},
					},
					ReportTemplate:  "$$ => $w.WriteByte($c)",
					SuggestTemplate: "$w.WriteByte($c)",
					WhereExpr: ir.FilterExpr{
						Line: 383,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.ByteWriter\") && (m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  383,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.ByteWriter\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 383, Op: ir.FilterStringOp, Src: "\"io.ByteWriter\"", Value: "io.ByteWriter"},
								},
							},
							ir.FilterExpr{
								Line: 383,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  383,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"c\"].Const",
										Value: "c",
									},
									ir.FilterExpr{
										Line: 383,
										Op:   ir.FilterLtOp,
										Src:  "m[\"c\"].Value.Int() < runeSelf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  383,
												Op:    ir.FilterVarValueIntOp,
												Src:   "m[\"c\"].Value.Int()",
												Value: "c",
											},
											ir.FilterExpr{
												Line:  383,
												Op:    ir.FilterIntOp,
												Src:   "runeSelf",
												Value: int64(128),
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        391,
			Name:        "sliceClear",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects slice clear loops, suggests an idiom that is recognized by the Go compiler",
			DocBefore:  "for i := 0; i < len(buf); i++ { buf[i] = 0 }",
			DocAfter:   "for i := range buf { buf[i] = 0 }",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 392,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 392, Value: "for $i := 0; $i < len($xs); $i++ { $xs[$i] = $zero }"},
					},
					ReportTemplate:  "for ... { ... } => for $i := range $xs { $xs[$i] = $zero }",
					SuggestTemplate: "for $i := range $xs { $xs[$i] = $zero }",
					WhereExpr: ir.FilterExpr{
						Line: 393,
						Op:   ir.FilterEqOp,
						Src:  "m[\"zero\"].Value.Int() == 0",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  393,
								Op:    ir.FilterVarValueIntOp,
								Src:   "m[\"zero\"].Value.Int()",
								Value: "zero",
							},
							ir.FilterExpr{
								Line:  393,
								Op:    ir.FilterIntOp,
								Src:   "0",
								Value: int64(0),
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        403,
			Name:        "utf8DecodeRune",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation",
			DocBefore:  "r := []rune(s)[0]",
			DocAfter:   "r, _ := utf8.DecodeRuneInString(s)",
			DocNote:    "See Go issue for details: https://github.com/golang/go/issues/45260",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 410,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 410, Value: "$ch := []rune($s)[0]"},
					},
					ReportTemplate:  "$$ => $ch, _ := utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ := utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 411,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  411,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 411, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  411,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				ir.Rule{
					Line: 414,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 414, Value: "$ch = []rune($s)[0]"},
					},
					ReportTemplate:  "$$ => $ch, _ = utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ = utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 415,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  415,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 415, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  415,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				ir.Rule{
					Line: 420,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 420, Value: "[]rune($s)[0]"},
					},
					ReportTemplate: "use utf8.DecodeRuneInString($s) here",
					WhereExpr: ir.FilterExpr{
						Line: 421,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && !m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  421,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 421, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line: 421,
								Op:   ir.FilterNotOp,
								Src:  "!m.File().Imports(`unicode/utf8`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  421,
										Op:    ir.FilterFileImportsOp,
										Src:   "m.File().Imports(`unicode/utf8`)",
										Value: "unicode/utf8",
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        429,
			Name:        "fprint",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln)",
			DocBefore:  "w.Write([]byte(fmt.Sprintf(\"%x\", 10)))",
			DocAfter:   "fmt.Fprintf(w, \"%x\", 10)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 430,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 430, Value: "$w.Write([]byte(fmt.Sprint($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  431,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 431, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 434,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 434, Value: "$w.Write([]byte(fmt.Sprintf($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  435,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 435, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 438,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 438, Value: "$w.Write([]byte(fmt.Sprintln($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  439,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 439, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 442,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 442, Value: "io.WriteString($w, fmt.Sprint($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
				},
				ir.Rule{
					Line: 445,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 445, Value: "io.WriteString($w, fmt.Sprintf($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
				},
				ir.Rule{
					Line: 448,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 448, Value: "io.WriteString($w, fmt.Sprintln($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
				},
			},
		},
		ir.RuleGroup{
			Line:        456,
			Name:        "writeString",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects w.Write calls which can be replaced with w.WriteString",
			DocBefore:  "w.Write([]byte(\"foo\"))",
			DocAfter:   "w.WriteString(\"foo\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 457,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 457, Value: "$w.Write([]byte($s))"},
					},
					ReportTemplate:  "$$ => $w.WriteString($s)",
					SuggestTemplate: "$w.WriteString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 458,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.StringWriter\") && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  458,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.StringWriter\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 458, Op: ir.FilterStringOp, Src: "\"io.StringWriter\"", Value: "io.StringWriter"},
								},
							},
							ir.FilterExpr{
								Line:  458,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 458, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        466,
			Name:        "writeBytes",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects w.WriteString calls which can be replaced with w.Write",
			DocBefore:  "w.WriteString(buf.String())",
			DocAfter:   "w.Write(buf.Bytes())",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 471,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 471, Value: "io.WriteString($w, $buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 472,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  472,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
								},
							},
							ir.FilterExpr{
								Line:  472,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 475,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 475, Value: "io.WriteString($w, string($buf.Bytes()))"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 476,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  476,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
								},
							},
							ir.FilterExpr{
								Line:  476,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 479,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 479, Value: "$w.WriteString($buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 480,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.Writer\") && isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  480,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 480, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
								},
							},
							ir.FilterExpr{
								Line: 480,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  480,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  480,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 468, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        488,
			Name:        "bufferString",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects bytes.Buffer String() calls where Bytes() could be used instead",
			DocBefore:  "strings.Contains(buf.String(), string(b))",
			DocAfter:   "bytes.Contains(buf.Bytes(), b)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 493,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 493, Value: "strings.Contains($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 494,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 494,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  494,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  494,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  494,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 494, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 496,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 496, Value: "strings.HasPrefix($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 497,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 497,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  497,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  497,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  497,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 497, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 499,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 499, Value: "strings.HasSuffix($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 500,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 500,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  500,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  500,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  500,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 500, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 502,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 502, Value: "strings.Count($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Count($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 503,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 503,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  503,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  503,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  503,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 503, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 506,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 506, Value: "strings.Contains($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 507,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 507,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  507,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  507,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  507,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 507, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 509,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 509, Value: "strings.HasPrefix($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 510,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 510,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  510,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  510,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  510,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 510, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 512,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 512, Value: "strings.HasSuffix($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 513,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 513,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  513,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  513,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  513,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 513, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 515,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 515, Value: "strings.Count($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Count($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 516,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 516,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  516,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  516,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 490, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  516,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 516, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        522,
			Name:        "rangeExprCopy",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects array range loops that result in an excessive full data copy",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 523,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 523, Value: "for $_, $_ := range $e { $*_ }"},
						ir.PatternString{Line: 523, Value: "for $_, $_ = range $e { $*_ }"},
					},
					ReportTemplate:  "$e => &$e",
					SuggestTemplate: "&$e",
					WhereExpr: ir.FilterExpr{
						Line: 524,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 524,
								Op:   ir.FilterAndOp,
								Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  524,
										Op:    ir.FilterVarAddressableOp,
										Src:   "m[\"e\"].Addressable",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  524,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
										Value: "e",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 524, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line: 524,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  524,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  524,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
				ir.Rule{
					Line: 530,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 530, Value: "for $_, $_ := range $e { $*_ }"},
						ir.PatternString{Line: 530, Value: "for $_, $_ = range $e { $*_ }"},
					},
					ReportTemplate: "range over big array value expression is ineffective",
					WhereExpr: ir.FilterExpr{
						Line: 531,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  531,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
								Value: "e",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 531, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"},
								},
							},
							ir.FilterExpr{
								Line: 531,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  531,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  531,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
			},
		},
		ir.RuleGroup{
			Line:        538,
			Name:        "rangeToAppend",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects range loops that can be turned into a single append call",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 539,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 539, Value: "for $_, $x := range $src { $dst = append($dst, $x) }"},
					},
					ReportTemplate:  "for ... { ... } => $dst = append($dst, $src...)",
					SuggestTemplate: "$dst = append($dst, $src...)",
					WhereExpr: ir.FilterExpr{
						Line:  540,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"src\"].Type.Is(`[]$_`)",
						Value: "src",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 540, Op: ir.FilterStringOp, Src: "`[]$_`", Value: "[]$_"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        547,
			Name:        "rangeRuneSlice",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects a range over []rune(string) where copying to a new slice is redundant",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 548,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 548, Value: "for _, $r := range []rune($s)"},
					},
					ReportTemplate:  "$$ => for _, $r := range $s",
					SuggestTemplate: "for _, $r := range $s",
					WhereExpr: ir.FilterExpr{
						Line:  549,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 549, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 552,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 552, Value: "for _, $r = range []rune($s)"},
					},
					ReportTemplate:  "$$ => for _, $r = range $s",
					SuggestTemplate: "for _, $r = range $s",
					WhereExpr: ir.FilterExpr{
						Line:  553,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 553, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 556,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 556, Value: "for range []rune($s)"},
					},
					ReportTemplate:  "$$ => for range $s",
					SuggestTemplate: "for range $s",
					WhereExpr: ir.FilterExpr{
						Line:  557,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 557, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 560,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 560, Value: "for _, $r := range string($runes)"},
					},
					ReportTemplate:  "$$ => for _, $r := range $runes",
					SuggestTemplate: "for _, $r := range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  561,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 561, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"},
						},
					},
				},
				ir.Rule{
					Line: 564,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 564, Value: "for _, $r = range string($runes)"},
					},
					ReportTemplate:  "$$ => for _, $r = range $runes",
					SuggestTemplate: "for _, $r = range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  565,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 565, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"},
						},
					},
				},
			},
		},
	},
}

