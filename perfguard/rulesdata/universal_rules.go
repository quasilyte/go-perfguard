// Code generated by "precompile.go". DO NOT EDIT.

package rulesdata

import "github.com/quasilyte/go-ruleguard/ruleguard/ir"

var Universal = &ir.File{
	PkgPath: "gorules",
	CustomDecls: []string{
		"var Bundle = dsl.Bundle{}",
	},
	BundleImports: []ir.BundleImport{},
	RuleGroups: []ir.RuleGroup{
		{
			Line:        45,
			Name:        "stringsCut",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for strings.Cut",
			DocBefore:   "email := strings.Split(s, \"@\")[0]",
			DocAfter:    "email, _, _ := strings.Cut(s, \"@\")",
			Rules: []ir.Rule{
				{
					Line:            46,
					SyntaxPatterns:  []ir.PatternString{{Line: 46, Value: "$dst := strings.Split($s, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ := strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ := strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  47,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				{
					Line:            49,
					SyntaxPatterns:  []ir.PatternString{{Line: 49, Value: "$dst = strings.Split($s, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ = strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ = strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  50,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		{
			Line:        58,
			Name:        "bytesCut",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for bytes.Cut",
			DocBefore:   "email := bytes.Split(b, \"@\")[0]",
			DocAfter:    "email, _, _ := bytes.Cut(b, []byte(\"@\"))",
			Rules: []ir.Rule{
				{
					Line:            59,
					SyntaxPatterns:  []ir.PatternString{{Line: 59, Value: "$dst := bytes.Split($b, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ := bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ := bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  60,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				{
					Line:            62,
					SyntaxPatterns:  []ir.PatternString{{Line: 62, Value: "$dst = bytes.Split($b, $sep)[0]"}},
					ReportTemplate:  "$$ => $dst, _, _ = bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ = bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  63,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		{
			Line:        71,
			Name:        "stringsClone",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects use cases for strings.Clone",
			DocBefore:   "s2 := string([]byte(s1))",
			DocAfter:    "s2 := strings.Clone(s1)",
			Rules: []ir.Rule{{
				Line:            72,
				SyntaxPatterns:  []ir.PatternString{{Line: 72, Value: "string([]byte($s))"}},
				ReportTemplate:  "$$ => strings.Clone($s)",
				SuggestTemplate: "strings.Clone($s)",
				WhereExpr: ir.FilterExpr{
					Line: 73,
					Op:   ir.FilterAndOp,
					Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const &&\n\tm.GoVersion().GreaterEqThan(\"1.18\")",
					Args: []ir.FilterExpr{
						{
							Line: 73,
							Op:   ir.FilterAndOp,
							Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const",
							Args: []ir.FilterExpr{
								{
									Line:  73,
									Op:    ir.FilterVarTypeIsOp,
									Src:   "m[\"s\"].Type.Is(`string`)",
									Value: "s",
									Args:  []ir.FilterExpr{{Line: 73, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
								},
								{
									Line: 74,
									Op:   ir.FilterNotOp,
									Src:  "!m[\"s\"].Const",
									Args: []ir.FilterExpr{{
										Line:  74,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"s\"].Const",
										Value: "s",
									}},
								},
							},
						},
						{
							Line:  75,
							Op:    ir.FilterGoVersionGreaterEqThanOp,
							Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
							Value: "1.18",
						},
					},
				},
			}},
		},
		{
			Line:        83,
			Name:        "equalFold",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects unoptimal strings/bytes case-insensitive comparison",
			DocBefore:   "strings.ToLower(x) == strings.ToLower(y)",
			DocAfter:    "strings.EqualFold(x, y)",
			Rules: []ir.Rule{
				{
					Line: 85,
					SyntaxPatterns: []ir.PatternString{
						{Line: 86, Value: "strings.ToLower($x) == $y"},
						{Line: 87, Value: "strings.ToLower($x) == strings.ToLower($y)"},
						{Line: 88, Value: "$x == strings.ToLower($y)"},
						{Line: 89, Value: "strings.ToUpper($x) == $y"},
						{Line: 90, Value: "strings.ToUpper($x) == strings.ToUpper($y)"},
						{Line: 91, Value: "$x == strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => strings.EqualFold($x, $y)",
					SuggestTemplate: "strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 92,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 92,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 92, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 92, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 92,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 92, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 92, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 96,
					SyntaxPatterns: []ir.PatternString{
						{Line: 97, Value: "strings.ToLower($x) != $y"},
						{Line: 98, Value: "strings.ToLower($x) != strings.ToLower($y)"},
						{Line: 99, Value: "$x != strings.ToLower($y)"},
						{Line: 100, Value: "strings.ToUpper($x) != $y"},
						{Line: 101, Value: "strings.ToUpper($x) != strings.ToUpper($y)"},
						{Line: 102, Value: "$x != strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => !strings.EqualFold($x, $y)",
					SuggestTemplate: "!strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 103,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 103,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 103, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 103, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 103,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 103, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 103, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 107,
					SyntaxPatterns: []ir.PatternString{
						{Line: 108, Value: "bytes.Equal(bytes.ToLower($x), $y)"},
						{Line: 109, Value: "bytes.Equal(bytes.ToLower($x), bytes.ToLower($y))"},
						{Line: 110, Value: "bytes.Equal($x, bytes.ToLower($y))"},
						{Line: 111, Value: "bytes.Equal(bytes.ToUpper($x), $y)"},
						{Line: 112, Value: "bytes.Equal(bytes.ToUpper($x), bytes.ToUpper($y))"},
						{Line: 113, Value: "bytes.Equal($x, bytes.ToUpper($y))"},
					},
					ReportTemplate:  "$$ => bytes.EqualFold($x, $y)",
					SuggestTemplate: "bytes.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 114,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 114,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 114, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 114, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 114,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 114, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 114, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 118,
					SyntaxPatterns: []ir.PatternString{
						{Line: 119, Value: "strings.HasPrefix(strings.ToLower($x), $y)"},
						{Line: 120, Value: "strings.HasPrefix(strings.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && strings.EqualFold($x[:len($y)], $y))",
					SuggestTemplate: "(len($x) >= len($y) && strings.EqualFold($x[:len($y)], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 121,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 121,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 121, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 121, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 121,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 121, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 121, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 123,
					SyntaxPatterns: []ir.PatternString{
						{Line: 124, Value: "strings.HasSuffix(strings.ToLower($x), $y)"},
						{Line: 125, Value: "strings.HasSuffix(strings.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && strings.EqualFold($x[len($x)-len($y):], $y))",
					SuggestTemplate: "(len($x) >= len($y) && strings.EqualFold($x[len($x)-len($y):], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 126,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 126,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 126, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 126, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 126,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 126, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 126, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 130,
					SyntaxPatterns: []ir.PatternString{
						{Line: 131, Value: "bytes.HasPrefix(bytes.ToLower($x), $y)"},
						{Line: 132, Value: "bytes.HasPrefix(bytes.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && bytes.EqualFold($x[:len($y)], $y))",
					SuggestTemplate: "(len($x) >= len($y) && bytes.EqualFold($x[:len($y)], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 133,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 133,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 133, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 133, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 133,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 133, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 133, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				{
					Line: 135,
					SyntaxPatterns: []ir.PatternString{
						{Line: 136, Value: "bytes.HasSuffix(bytes.ToLower($x), $y)"},
						{Line: 137, Value: "bytes.HasSuffix(bytes.ToUpper($x), $y)"},
					},
					ReportTemplate:  "$$ => (len($x) >= len($y) && bytes.EqualFold($x[len($x)-len($y):], $y))",
					SuggestTemplate: "(len($x) >= len($y) && bytes.EqualFold($x[len($x)-len($y):], $y))",
					WhereExpr: ir.FilterExpr{
						Line: 138,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							{
								Line: 138,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									{Line: 138, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									{Line: 138, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							{
								Line: 138,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									{Line: 138, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									{Line: 138, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
			},
		},
		{
			Line:        144,
			Name:        "redundantSprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects redundant fmt.Sprint calls",
			Rules: []ir.Rule{
				{
					Line: 145,
					SyntaxPatterns: []ir.PatternString{
						{Line: 145, Value: "fmt.Sprint($x)"},
						{Line: 145, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 145, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.String()",
					SuggestTemplate: "$x.String()",
					WhereExpr: ir.FilterExpr{
						Line:  146,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 146, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
					},
				},
				{
					Line: 149,
					SyntaxPatterns: []ir.PatternString{
						{Line: 149, Value: "fmt.Sprint($x)"},
						{Line: 149, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 149, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.Error()",
					SuggestTemplate: "$x.Error()",
					WhereExpr: ir.FilterExpr{
						Line:  150,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`error`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 150, Op: ir.FilterStringOp, Src: "`error`", Value: "error"}},
					},
				},
				{
					Line: 153,
					SyntaxPatterns: []ir.PatternString{
						{Line: 153, Value: "fmt.Sprint($x)"},
						{Line: 153, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 153, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x",
					SuggestTemplate: "$x",
					WhereExpr: ir.FilterExpr{
						Line:  154,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`string`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 154, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line: 157,
					SyntaxPatterns: []ir.PatternString{
						{Line: 157, Value: "fmt.Sprint($x)"},
						{Line: 157, Value: "fmt.Sprintf(\"%s\", $x)"},
						{Line: 157, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => string($x)",
					SuggestTemplate: "string($x)",
					WhereExpr: ir.FilterExpr{
						Line: 158,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.ConvertibleTo(`string`) && !m[\"x\"].Type.OfKind(\"numeric\")",
						Args: []ir.FilterExpr{
							{
								Line:  158,
								Op:    ir.FilterVarTypeConvertibleToOp,
								Src:   "m[\"x\"].Type.ConvertibleTo(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 158, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line: 158,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Type.OfKind(\"numeric\")",
								Args: []ir.FilterExpr{{
									Line:  158,
									Op:    ir.FilterVarTypeOfKindOp,
									Src:   "m[\"x\"].Type.OfKind(\"numeric\")",
									Value: "x",
									Args:  []ir.FilterExpr{{Line: 158, Op: ir.FilterStringOp, Src: "\"numeric\"", Value: "numeric"}},
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        166,
			Name:        "redundantFprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects redundant fmt.Fprint calls",
			DocBefore:   "fmt.Fprintf(w, \"%s\", data)",
			DocAfter:    "w.WriteString(data.String())",
			Rules: []ir.Rule{
				{
					Line: 167,
					SyntaxPatterns: []ir.PatternString{
						{Line: 167, Value: "fmt.Fprint($w, $x)"},
						{Line: 167, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 167, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x.String())",
					SuggestTemplate: "$w.WriteString($x.String())",
					WhereExpr: ir.FilterExpr{
						Line: 168,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  168,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 168, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
							{
								Line:  168,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 168, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 171,
					SyntaxPatterns: []ir.PatternString{
						{Line: 171, Value: "fmt.Fprint($w, $x)"},
						{Line: 171, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 171, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x.Error())",
					SuggestTemplate: "$w.WriteString($x.Error())",
					WhereExpr: ir.FilterExpr{
						Line: 172,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`error`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  172,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`error`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 172, Op: ir.FilterStringOp, Src: "`error`", Value: "error"}},
							},
							{
								Line:  172,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 172, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 175,
					SyntaxPatterns: []ir.PatternString{
						{Line: 175, Value: "fmt.Fprint($w, $x)"},
						{Line: 175, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 175, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.WriteString($x)",
					SuggestTemplate: "$w.WriteString($x)",
					WhereExpr: ir.FilterExpr{
						Line: 176,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"w\"].Type.Implements(`io.StringWriter`)",
						Args: []ir.FilterExpr{
							{
								Line:  176,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 176, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  176,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(`io.StringWriter`)",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 176, Op: ir.FilterStringOp, Src: "`io.StringWriter`", Value: "io.StringWriter"}},
							},
						},
					},
				},
				{
					Line: 179,
					SyntaxPatterns: []ir.PatternString{
						{Line: 179, Value: "fmt.Fprint($w, $x)"},
						{Line: 179, Value: "fmt.Fprintf($w, \"%s\", $x)"},
						{Line: 179, Value: "fmt.Fprintf($w, \"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $w.Write($x)",
					SuggestTemplate: "$w.Write($x)",
					WhereExpr: ir.FilterExpr{
						Line:  180,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`[]byte`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 180, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
			},
		},
		{
			Line:        188,
			Name:        "sliceClone",
			MatcherName: "m",
			DocTags:     []string{"o2", "score2"},
			DocSummary:  "Detects slice copying patterns that can be optimized",
			DocBefore:   "dst := append([]int(nil), src...)",
			DocAfter:    "dst := make([]int, len(src)); copy(dst, src)",
			Rules: []ir.Rule{
				{
					Line: 189,
					SyntaxPatterns: []ir.PatternString{
						{Line: 189, Value: "$dst = append([]$elem(nil), $src...)"},
						{Line: 189, Value: "$dst = append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst = make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst = make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 190,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{{
							Line:  190,
							Op:    ir.FilterVarTypeHasPointersOp,
							Src:   "m[\"elem\"].Type.HasPointers()",
							Value: "elem",
						}},
					},
				},
				{
					Line: 192,
					SyntaxPatterns: []ir.PatternString{
						{Line: 192, Value: "$dst := append([]$elem(nil), $src...)"},
						{Line: 192, Value: "$dst := append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst := make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst := make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 193,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{{
							Line:  193,
							Op:    ir.FilterVarTypeHasPointersOp,
							Src:   "m[\"elem\"].Type.HasPointers()",
							Value: "elem",
						}},
					},
				},
			},
		},
		{
			Line:        199,
			Name:        "stringsJoinConcat",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detect strings.Join usages that can be rewritten as a string concat",
			Rules: []ir.Rule{
				{
					Line:            200,
					SyntaxPatterns:  []ir.PatternString{{Line: 200, Value: "strings.Join([]string{$x, $y}, \"\")"}},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 201,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 201,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{{
									Line:  201,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"x\"].Const",
									Value: "x",
								}},
							},
							{
								Line: 201,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{{
									Line:  201,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"y\"].Const",
									Value: "y",
								}},
							},
						},
					},
				},
				{
					Line:            203,
					SyntaxPatterns:  []ir.PatternString{{Line: 203, Value: "strings.Join([]string{$x, $y, $z}, \"\")"}},
					ReportTemplate:  "$$ => $x + $y + $z",
					SuggestTemplate: "$x + $y + $z",
					WhereExpr: ir.FilterExpr{
						Line: 204,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 204,
								Op:   ir.FilterAndOp,
								Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									{
										Line: 204,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"x\"].Const",
										Args: []ir.FilterExpr{{
											Line:  204,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"x\"].Const",
											Value: "x",
										}},
									},
									{
										Line: 204,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{{
											Line:  204,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"y\"].Const",
											Value: "y",
										}},
									},
								},
							},
							{
								Line: 204,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{{
									Line:  204,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"z\"].Const",
									Value: "z",
								}},
							},
						},
					},
				},
				{
					Line:            207,
					SyntaxPatterns:  []ir.PatternString{{Line: 207, Value: "strings.Join([]string{$x, $y}, $glue)"}},
					ReportTemplate:  "$$ => $x + $glue + $y",
					SuggestTemplate: "$x + $glue + $y",
					WhereExpr: ir.FilterExpr{
						Line: 208,
						Op:   ir.FilterAndOp,
						Src:  "!m[\"x\"].Const && !m[\"y\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 208,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"x\"].Const",
								Args: []ir.FilterExpr{{
									Line:  208,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"x\"].Const",
									Value: "x",
								}},
							},
							{
								Line: 208,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"y\"].Const",
								Args: []ir.FilterExpr{{
									Line:  208,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"y\"].Const",
									Value: "y",
								}},
							},
						},
					},
				},
				{
					Line:            211,
					SyntaxPatterns:  []ir.PatternString{{Line: 211, Value: "strings.Join([]string{$x, $y, $z}, $glue)"}},
					ReportTemplate:  "$$ => $x + $glue + $y + $glue + $z",
					SuggestTemplate: "$x + $glue + $y + $glue + $z",
					WhereExpr: ir.FilterExpr{
						Line: 212,
						Op:   ir.FilterAndOp,
						Src:  "m[\"glue\"].Const && !m[\"x\"].Const && !m[\"y\"].Const && !m[\"z\"].Const",
						Args: []ir.FilterExpr{
							{
								Line: 212,
								Op:   ir.FilterAndOp,
								Src:  "m[\"glue\"].Const && !m[\"x\"].Const && !m[\"y\"].Const",
								Args: []ir.FilterExpr{
									{
										Line: 212,
										Op:   ir.FilterAndOp,
										Src:  "m[\"glue\"].Const && !m[\"x\"].Const",
										Args: []ir.FilterExpr{
											{
												Line:  212,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"glue\"].Const",
												Value: "glue",
											},
											{
												Line: 212,
												Op:   ir.FilterNotOp,
												Src:  "!m[\"x\"].Const",
												Args: []ir.FilterExpr{{
													Line:  212,
													Op:    ir.FilterVarConstOp,
													Src:   "m[\"x\"].Const",
													Value: "x",
												}},
											},
										},
									},
									{
										Line: 212,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Const",
										Args: []ir.FilterExpr{{
											Line:  212,
											Op:    ir.FilterVarConstOp,
											Src:   "m[\"y\"].Const",
											Value: "y",
										}},
									},
								},
							},
							{
								Line: 212,
								Op:   ir.FilterNotOp,
								Src:  "!m[\"z\"].Const",
								Args: []ir.FilterExpr{{
									Line:  212,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"z\"].Const",
									Value: "z",
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        220,
			Name:        "sprintConcat",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects sprint calls that can be rewritten as a string concat",
			DocBefore:   "fmt.Sprintf(\"%s%s\", x, y)",
			DocAfter:    "x + y",
			Rules: []ir.Rule{
				{
					Line:            221,
					SyntaxPatterns:  []ir.PatternString{{Line: 221, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"}},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 222,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  222,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 222, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  222,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`string`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 222, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            225,
					SyntaxPatterns:  []ir.PatternString{{Line: 225, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"}},
					ReportTemplate:  "$$ => $x.String() + $y.String()",
					SuggestTemplate: "$x.String() + $y.String()",
					WhereExpr: ir.FilterExpr{
						Line: 226,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"y\"].Type.Implements(`fmt.Stringer`)",
						Args: []ir.FilterExpr{
							{
								Line:  226,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 226, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
							{
								Line:  226,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"y\"].Type.Implements(`fmt.Stringer`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 226, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        234,
			Name:        "strconv",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects fmt uses that can be replaced with strconv",
			DocBefore:   "fmt.Sprintf(\"%d\", i)",
			DocAfter:    "strconv.Itoa(i)",
			Rules: []ir.Rule{
				{
					Line: 238,
					SyntaxPatterns: []ir.PatternString{
						{Line: 238, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 238, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 238, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.Itoa($x)",
					SuggestTemplate: "strconv.Itoa($x)",
					WhereExpr: ir.FilterExpr{
						Line:  239,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 239, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line: 243,
					SyntaxPatterns: []ir.PatternString{
						{Line: 243, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 243, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 243, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 10)",
					SuggestTemplate: "strconv.FormatInt($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  244,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 244, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"}},
					},
				},
				{
					Line:            245,
					SyntaxPatterns:  []ir.PatternString{{Line: 245, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 16)",
					SuggestTemplate: "strconv.FormatInt($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  246,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 246, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"}},
					},
				},
				{
					Line: 247,
					SyntaxPatterns: []ir.PatternString{
						{Line: 247, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 247, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 247, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 10)",
					SuggestTemplate: "strconv.FormatUint($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  248,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 248, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"}},
					},
				},
				{
					Line:            249,
					SyntaxPatterns:  []ir.PatternString{{Line: 249, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 16)",
					SuggestTemplate: "strconv.FormatUint($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  250,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 250, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"}},
					},
				},
				{
					Line: 252,
					SyntaxPatterns: []ir.PatternString{
						{Line: 252, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 252, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 252, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 10)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  253,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 253, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line:            254,
					SyntaxPatterns:  []ir.PatternString{{Line: 254, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 16)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  255,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 255, Op: ir.FilterStringOp, Src: "`int`", Value: "int"}},
					},
				},
				{
					Line: 257,
					SyntaxPatterns: []ir.PatternString{
						{Line: 257, Value: "fmt.Sprintf(\"%d\", $x)"},
						{Line: 257, Value: "fmt.Sprintf(\"%v\", $x)"},
						{Line: 257, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 10)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  258,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 258, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"}},
					},
				},
				{
					Line:            259,
					SyntaxPatterns:  []ir.PatternString{{Line: 259, Value: "fmt.Sprintf(\"%x\", $x)"}},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 16)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  260,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 260, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"}},
					},
				},
			},
		},
		{
			Line:        267,
			Name:        "appendAPI",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects cases that can benefit from append-friendly APIs",
			DocBefore:   "b = append(b, strconv.Itoa(v)...)",
			DocAfter:    "b = strconv.AppendInt(b, v, 10)",
			Rules: []ir.Rule{
				{
					Line:            275,
					SyntaxPatterns:  []ir.PatternString{{Line: 275, Value: "$b = append($b, strconv.Itoa($x)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, int64($x), 10)",
					SuggestTemplate: "$b = strconv.AppendInt($b, int64($x), 10)",
				},
				{
					Line:            277,
					SyntaxPatterns:  []ir.PatternString{{Line: 277, Value: "$b = append($b, strconv.FormatInt($x, $base)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendInt($b, $x, $base)",
				},
				{
					Line:            279,
					SyntaxPatterns:  []ir.PatternString{{Line: 279, Value: "$b = append($b, strconv.FormatUint($x, $base)...)"}},
					ReportTemplate:  "$$ => $b = strconv.AppendUint($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendUint($b, $x, $base)",
				},
				{
					Line:            282,
					SyntaxPatterns:  []ir.PatternString{{Line: 282, Value: "$b = append($b, $t.Format($layout)...)"}},
					ReportTemplate:  "$$ => $b = $t.AppendFormat($b, $layout)",
					SuggestTemplate: "$b = $t.AppendFormat($b, $layout)",
					WhereExpr: ir.FilterExpr{
						Line: 283,
						Op:   ir.FilterOrOp,
						Src:  "m[\"t\"].Type.Is(`time.Time`) || m[\"t\"].Type.Is(`*time.Time`)",
						Args: []ir.FilterExpr{
							{
								Line:  283,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`time.Time`)",
								Value: "t",
								Args:  []ir.FilterExpr{{Line: 283, Op: ir.FilterStringOp, Src: "`time.Time`", Value: "time.Time"}},
							},
							{
								Line:  283,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`*time.Time`)",
								Value: "t",
								Args:  []ir.FilterExpr{{Line: 283, Op: ir.FilterStringOp, Src: "`*time.Time`", Value: "*time.Time"}},
							},
						},
					},
				},
				{
					Line:            286,
					SyntaxPatterns:  []ir.PatternString{{Line: 286, Value: "$b = append($b, $v.String()...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, 'g', 10)",
					SuggestTemplate: "$b = $v.Append($b, 'g', 10)",
					WhereExpr: ir.FilterExpr{
						Line: 287,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							{
								Line:  287,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 287, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"}},
							},
							{
								Line:  287,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 287, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"}},
							},
						},
					},
				},
				{
					Line:            289,
					SyntaxPatterns:  []ir.PatternString{{Line: 289, Value: "$b = append($b, $v.Text($format, $prec)...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, $format, $prec)",
					SuggestTemplate: "$b = $v.Append($b, $format, $prec)",
					WhereExpr: ir.FilterExpr{
						Line: 290,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							{
								Line:  290,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 290, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"}},
							},
							{
								Line:  290,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 290, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"}},
							},
						},
					},
				},
				{
					Line:            293,
					SyntaxPatterns:  []ir.PatternString{{Line: 293, Value: "$b = append($b, $v.String()...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, 10)",
					SuggestTemplate: "$b = $v.Append($b, 10)",
					WhereExpr: ir.FilterExpr{
						Line: 294,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							{
								Line:  294,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 294, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"}},
							},
							{
								Line:  294,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 294, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"}},
							},
						},
					},
				},
				{
					Line:            296,
					SyntaxPatterns:  []ir.PatternString{{Line: 296, Value: "$b = append($b, $v.Text($base)...)"}},
					ReportTemplate:  "$$ => $b = $v.Append($b, $base)",
					SuggestTemplate: "$b = $v.Append($b, $base)",
					WhereExpr: ir.FilterExpr{
						Line: 297,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							{
								Line:  297,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 297, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"}},
							},
							{
								Line:  297,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args:  []ir.FilterExpr{{Line: 297, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        305,
			Name:        "convReorder",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects patterns that can be reordered to make the code faster",
			DocBefore:   "strings.TrimSpace(string(b))",
			DocAfter:    "string(bytes.TrimSpace(b))",
			Rules: []ir.Rule{
				{
					Line:            311,
					SyntaxPatterns:  []ir.PatternString{{Line: 311, Value: "strings.TrimSpace(string($b))"}},
					ReportTemplate:  "$$ => string(bytes.TrimSpace($b))",
					SuggestTemplate: "string(bytes.TrimSpace($b))",
					WhereExpr: ir.FilterExpr{
						Line:  312,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 312, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            315,
					SyntaxPatterns:  []ir.PatternString{{Line: 315, Value: "bytes.TrimSpace([]byte($s))"}},
					ReportTemplate:  "$$ => []byte(strings.TrimSpace($s))",
					SuggestTemplate: "[]byte(strings.TrimSpace($s))",
					WhereExpr: ir.FilterExpr{
						Line:  316,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 316, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            319,
					SyntaxPatterns:  []ir.PatternString{{Line: 319, Value: "strings.TrimPrefix(string($b1), string($b2))"}},
					ReportTemplate:  "$$ => string(bytes.TrimPrefix($b1, $b2))",
					SuggestTemplate: "string(bytes.TrimPrefix($b1, $b2))",
					WhereExpr: ir.FilterExpr{
						Line: 320,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  320,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b1\"].Type.Is(`[]byte`)",
								Value: "b1",
								Args:  []ir.FilterExpr{{Line: 320, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  320,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 320, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            323,
					SyntaxPatterns:  []ir.PatternString{{Line: 323, Value: "bytes.TrimPrefix([]byte($s1), []byte($s2))"}},
					ReportTemplate:  "$$ => []byte(strings.TrimPrefix($s1, $s2))",
					SuggestTemplate: "[]byte(strings.TrimPrefix($s1, $s2))",
					WhereExpr: ir.FilterExpr{
						Line: 324,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  324,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s1\"].Type.Is(`string`)",
								Value: "s1",
								Args:  []ir.FilterExpr{{Line: 324, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  324,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 324, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        332,
			Name:        "slicedConv",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects sliced slice copying that can be optimized",
			DocBefore:   "string(b)[:n]",
			DocAfter:    "string(b[:n])",
			Rules: []ir.Rule{
				{
					Line:            333,
					SyntaxPatterns:  []ir.PatternString{{Line: 333, Value: "string($b)[:$n]"}},
					ReportTemplate:  "$$ => string($b[:$n])",
					SuggestTemplate: "string($b[:$n])",
					WhereExpr: ir.FilterExpr{
						Line:  334,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 334, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            337,
					SyntaxPatterns:  []ir.PatternString{{Line: 337, Value: "[]byte($s)[:$n]"}},
					ReportTemplate:  "$$ => []byte($s[:$n])",
					SuggestTemplate: "[]byte($s[:$n])",
					WhereExpr: ir.FilterExpr{
						Line:  338,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 338, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
			},
		},
		{
			Line:        346,
			Name:        "stringCopyElim",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects redundant conversions between string and []byte",
			DocBefore:   "copy(b, []byte(s))",
			DocAfter:    "copy(b, s)",
			Rules: []ir.Rule{
				{
					Line:            347,
					SyntaxPatterns:  []ir.PatternString{{Line: 347, Value: "copy($b, []byte($s))"}},
					ReportTemplate:  "$$ => copy($b, $s)",
					SuggestTemplate: "copy($b, $s)",
					WhereExpr: ir.FilterExpr{
						Line:  348,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 348, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            351,
					SyntaxPatterns:  []ir.PatternString{{Line: 351, Value: "append($b, []byte($s)...)"}},
					ReportTemplate:  "$$ => append($b, $s...)",
					SuggestTemplate: "append($b, $s...)",
					WhereExpr: ir.FilterExpr{
						Line:  352,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 352, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            355,
					SyntaxPatterns:  []ir.PatternString{{Line: 355, Value: "len(string($b))"}},
					ReportTemplate:  "$$ => len($b)",
					SuggestTemplate: "len($b)",
					WhereExpr: ir.FilterExpr{
						Line:  355,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 355, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            357,
					SyntaxPatterns:  []ir.PatternString{{Line: 357, Value: "[]byte(strings.$f(string($b)))"}},
					ReportTemplate:  "$$ => bytes.$f($b)",
					SuggestTemplate: "bytes.$f($b)",
					WhereExpr: ir.FilterExpr{
						Line: 358,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
						Args: []ir.FilterExpr{
							{
								Line:  358,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 358, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  359,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 359, Op: ir.FilterStringOp, Src: "`ToUpper|ToLower|TrimSpace`", Value: "ToUpper|ToLower|TrimSpace"}},
							},
						},
					},
				},
				{
					Line:            362,
					SyntaxPatterns:  []ir.PatternString{{Line: 362, Value: "[]byte(strings.$f(string($b), $s2))"}},
					ReportTemplate:  "$$ => bytes.$f($b, []byte($s2))",
					SuggestTemplate: "bytes.$f($b, []byte($s2))",
					WhereExpr: ir.FilterExpr{
						Line: 363,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
						Args: []ir.FilterExpr{
							{
								Line:  363,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 363, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  364,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 364, Op: ir.FilterStringOp, Src: "`TrimPrefix|TrimSuffix`", Value: "TrimPrefix|TrimSuffix"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        372,
			Name:        "regexpStringCopyElim",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects inefficient regexp usage in regard to string/[]byte conversions",
			DocBefore:   "regexp.ReplaceAll([]byte(s), []byte(\"foo\"))",
			DocAfter:    "regexp.ReplaceAllString(s, \"foo\")",
			Rules: []ir.Rule{
				{
					Line:            375,
					SyntaxPatterns:  []ir.PatternString{{Line: 375, Value: "$re.Match([]byte($s))"}},
					ReportTemplate:  "$$ => $re.MatchString($s)",
					SuggestTemplate: "$re.MatchString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 376,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  376,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 376, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  376,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 376, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            379,
					SyntaxPatterns:  []ir.PatternString{{Line: 379, Value: "$re.FindIndex([]byte($s))"}},
					ReportTemplate:  "$$ => $re.FindStringIndex($s)",
					SuggestTemplate: "$re.FindStringIndex($s)",
					WhereExpr: ir.FilterExpr{
						Line: 380,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  380,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 380, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  380,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 380, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            383,
					SyntaxPatterns:  []ir.PatternString{{Line: 383, Value: "$re.FindAllIndex([]byte($s), $n)"}},
					ReportTemplate:  "$$ => $re.FindAllStringIndex($s, $n)",
					SuggestTemplate: "$re.FindAllStringIndex($s, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 384,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line:  384,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 384, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  384,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 384, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            387,
					SyntaxPatterns:  []ir.PatternString{{Line: 387, Value: "string($re.ReplaceAll([]byte($s), []byte($s2)))"}},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, $s2)",
					SuggestTemplate: "$re.ReplaceAllString($s, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 388,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 388,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  388,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 388, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  388,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args:  []ir.FilterExpr{{Line: 388, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  388,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 388, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            391,
					SyntaxPatterns:  []ir.PatternString{{Line: 391, Value: "string($re.ReplaceAll([]byte($s), $b))"}},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, string($b))",
					SuggestTemplate: "$re.ReplaceAllString($s, string($b))",
					WhereExpr: ir.FilterExpr{
						Line: 392,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 392,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  392,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 392, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  392,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args:  []ir.FilterExpr{{Line: 392, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  392,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 392, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            397,
					SyntaxPatterns:  []ir.PatternString{{Line: 397, Value: "$re.MatchString(string($b))"}},
					ReportTemplate:  "$$ => $re.Match($b)",
					SuggestTemplate: "$re.Match($b)",
					WhereExpr: ir.FilterExpr{
						Line: 398,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  398,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 398, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  398,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 398, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            401,
					SyntaxPatterns:  []ir.PatternString{{Line: 401, Value: "$re.FindStringIndex(string($b))"}},
					ReportTemplate:  "$$ => $re.FindIndex($b)",
					SuggestTemplate: "$re.FindIndex($b)",
					WhereExpr: ir.FilterExpr{
						Line: 402,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  402,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 402, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  402,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 402, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            405,
					SyntaxPatterns:  []ir.PatternString{{Line: 405, Value: "$re.FindAllStringIndex(string($b), $n)"}},
					ReportTemplate:  "$$ => $re.FindAllIndex($b, $n)",
					SuggestTemplate: "$re.FindAllIndex($b, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 406,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  406,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args:  []ir.FilterExpr{{Line: 406, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
							},
							{
								Line:  406,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 406, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            409,
					SyntaxPatterns:  []ir.PatternString{{Line: 409, Value: "[]byte($re.ReplaceAllString(string($b), string($b2)))"}},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, $b2)",
					SuggestTemplate: "$re.ReplaceAll($b, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 410,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 410,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  410,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 410, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  410,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args:  []ir.FilterExpr{{Line: 410, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  410,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 410, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            413,
					SyntaxPatterns:  []ir.PatternString{{Line: 413, Value: "[]byte($re.ReplaceAllString(string($b), $s))"}},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, []byte($s))",
					SuggestTemplate: "$re.ReplaceAll($b, []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 414,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 414,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  414,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args:  []ir.FilterExpr{{Line: 414, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"}},
									},
									{
										Line:  414,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args:  []ir.FilterExpr{{Line: 414, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  414,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 414, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        423,
			Name:        "indexAlloc",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects strings.Index()-like calls that may allocate more than they should",
			DocBefore:   "strings.Index(string(x), y)",
			DocAfter:    "bytes.Index(x, []byte(y))",
			DocNote:     "See Go issue for details: https://github.com/golang/go/issues/25864",
			Rules: []ir.Rule{
				{
					Line:            427,
					SyntaxPatterns:  []ir.PatternString{{Line: 427, Value: "strings.$f(string($b1), string($b2))"}},
					ReportTemplate:  "$$ => bytes.$f($b1, $b2)",
					SuggestTemplate: "bytes.$f($b1, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 428,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 428,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									{
										Line:  428,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args:  []ir.FilterExpr{{Line: 428, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
									},
									{
										Line:  429,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b1\"].Type.Is(`[]byte`)",
										Value: "b1",
										Args:  []ir.FilterExpr{{Line: 429, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
									},
								},
							},
							{
								Line:  429,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args:  []ir.FilterExpr{{Line: 429, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            432,
					SyntaxPatterns:  []ir.PatternString{{Line: 432, Value: "bytes.$f([]byte($s1), []byte($s2))"}},
					ReportTemplate:  "$$ => strings.$f($s1, $s2)",
					SuggestTemplate: "strings.$f($s1, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 433,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 433,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									{
										Line:  433,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args:  []ir.FilterExpr{{Line: 433, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
									},
									{
										Line:  434,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s1\"].Type.Is(`string`)",
										Value: "s1",
										Args:  []ir.FilterExpr{{Line: 434, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line:  434,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args:  []ir.FilterExpr{{Line: 434, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            443,
					SyntaxPatterns:  []ir.PatternString{{Line: 443, Value: "strings.Index(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.Index($x, []byte($y))",
					SuggestTemplate: "bytes.Index($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 443,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 443,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 443,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 443, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 443, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 439,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  443,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 439, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  443,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 440, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            444,
					SyntaxPatterns:  []ir.PatternString{{Line: 444, Value: "strings.Contains(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.Contains($x, []byte($y))",
					SuggestTemplate: "bytes.Contains($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 444,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 444,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 444,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 444, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 444, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 439,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  444,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 439, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  444,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 440, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            445,
					SyntaxPatterns:  []ir.PatternString{{Line: 445, Value: "strings.HasPrefix(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($x, []byte($y))",
					SuggestTemplate: "bytes.HasPrefix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 445,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 445,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 445,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 445, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 445, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 439,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  445,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 439, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  445,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 440, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            446,
					SyntaxPatterns:  []ir.PatternString{{Line: 446, Value: "strings.HasSuffix(string($x), $y)"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($x, []byte($y))",
					SuggestTemplate: "bytes.HasSuffix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 446,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							{
								Line: 446,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 446,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 446, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 446, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 439,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  446,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 439, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  446,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 440, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            454,
					SyntaxPatterns:  []ir.PatternString{{Line: 454, Value: "bytes.Index([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.Index($x, string($y))",
					SuggestTemplate: "strings.Index($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 454,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 454,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 454,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 454, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 454, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 450,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  454,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 450, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  454,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 451, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            455,
					SyntaxPatterns:  []ir.PatternString{{Line: 455, Value: "bytes.Contains([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.Contains($x, string($y))",
					SuggestTemplate: "strings.Contains($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 455,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 455,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 455,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 455, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 455, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 450,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  455,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 450, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  455,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 451, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            456,
					SyntaxPatterns:  []ir.PatternString{{Line: 456, Value: "bytes.HasPrefix([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.HasPrefix($x, string($y))",
					SuggestTemplate: "strings.HasPrefix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 456,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 456,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 456,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 456, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 456, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 450,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  456,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 450, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  456,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 451, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            457,
					SyntaxPatterns:  []ir.PatternString{{Line: 457, Value: "bytes.HasSuffix([]byte($x), $y)"}},
					ReportTemplate:  "$$ => strings.HasSuffix($x, string($y))",
					SuggestTemplate: "strings.HasSuffix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 457,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							{
								Line: 457,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									{
										Line: 457,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											{Line: 457, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											{Line: 457, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									{
										Line: 450,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{{
											Line:  457,
											Op:    ir.FilterVarNodeIsOp,
											Src:   "m[\"y\"].Node.Is(`CallExpr`)",
											Value: "y",
											Args:  []ir.FilterExpr{{Line: 450, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"}},
										}},
									},
								},
							},
							{
								Line:  457,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 451, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        464,
			Name:        "writeByte",
			MatcherName: "m",
			DocTags:     []string{"o1", "score1"},
			DocSummary:  "Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead",
			DocBefore:   "w.WriteRune('\\n')",
			DocAfter:    "w.WriteByte('\\n')",
			Rules: []ir.Rule{{
				Line:            468,
				SyntaxPatterns:  []ir.PatternString{{Line: 468, Value: "$w.WriteRune($c)"}},
				ReportTemplate:  "$$ => $w.WriteByte($c)",
				SuggestTemplate: "$w.WriteByte($c)",
				WhereExpr: ir.FilterExpr{
					Line: 469,
					Op:   ir.FilterAndOp,
					Src:  "m[\"w\"].Type.HasMethod(`io.ByteWriter.WriteByte`) && (m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
					Args: []ir.FilterExpr{
						{
							Line:  469,
							Op:    ir.FilterVarTypeHasMethodOp,
							Src:   "m[\"w\"].Type.HasMethod(`io.ByteWriter.WriteByte`)",
							Value: "w",
							Args:  []ir.FilterExpr{{Line: 469, Op: ir.FilterStringOp, Src: "`io.ByteWriter.WriteByte`", Value: "io.ByteWriter.WriteByte"}},
						},
						{
							Line: 469,
							Op:   ir.FilterAndOp,
							Src:  "(m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
							Args: []ir.FilterExpr{
								{
									Line:  469,
									Op:    ir.FilterVarConstOp,
									Src:   "m[\"c\"].Const",
									Value: "c",
								},
								{
									Line: 469,
									Op:   ir.FilterLtOp,
									Src:  "m[\"c\"].Value.Int() < runeSelf",
									Args: []ir.FilterExpr{
										{
											Line:  469,
											Op:    ir.FilterVarValueIntOp,
											Src:   "m[\"c\"].Value.Int()",
											Value: "c",
										},
										{
											Line:  469,
											Op:    ir.FilterIntOp,
											Src:   "runeSelf",
											Value: int64(128),
										},
									},
								},
							},
						},
					},
				},
			}},
		},
		{
			Line:        477,
			Name:        "sliceClear",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects slice clear loops, suggests an idiom that is recognized by the Go compiler",
			DocBefore:   "for i := 0; i < len(buf); i++ { buf[i] = 0 }",
			DocAfter:    "for i := range buf { buf[i] = 0 }",
			Rules: []ir.Rule{{
				Line:            478,
				SyntaxPatterns:  []ir.PatternString{{Line: 478, Value: "for $i := 0; $i < len($xs); $i++ { $xs[$i] = $zero }"}},
				ReportTemplate:  "for ... { ... } => for $i := range $xs { $xs[$i] = $zero }",
				SuggestTemplate: "for $i := range $xs { $xs[$i] = $zero }",
				WhereExpr: ir.FilterExpr{
					Line: 479,
					Op:   ir.FilterEqOp,
					Src:  "m[\"zero\"].Value.Int() == 0",
					Args: []ir.FilterExpr{
						{
							Line:  479,
							Op:    ir.FilterVarValueIntOp,
							Src:   "m[\"zero\"].Value.Int()",
							Value: "zero",
						},
						{
							Line:  479,
							Op:    ir.FilterIntOp,
							Src:   "0",
							Value: int64(0),
						},
					},
				},
			}},
		},
		{
			Line:        489,
			Name:        "utf8DecodeRune",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation",
			DocBefore:   "r := []rune(s)[0]",
			DocAfter:    "r, _ := utf8.DecodeRuneInString(s)",
			DocNote:     "See Go issue for details: https://github.com/golang/go/issues/45260",
			Rules: []ir.Rule{
				{
					Line:            496,
					SyntaxPatterns:  []ir.PatternString{{Line: 496, Value: "$ch := []rune($s)[0]"}},
					ReportTemplate:  "$$ => $ch, _ := utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ := utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 497,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  497,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 497, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  497,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				{
					Line:            500,
					SyntaxPatterns:  []ir.PatternString{{Line: 500, Value: "$ch = []rune($s)[0]"}},
					ReportTemplate:  "$$ => $ch, _ = utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ = utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 501,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  501,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 501, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line:  501,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				{
					Line:           506,
					SyntaxPatterns: []ir.PatternString{{Line: 506, Value: "[]rune($s)[0]"}},
					ReportTemplate: "use utf8.DecodeRuneInString($s) here",
					WhereExpr: ir.FilterExpr{
						Line: 507,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && !m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							{
								Line:  507,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 507, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
							{
								Line: 507,
								Op:   ir.FilterNotOp,
								Src:  "!m.File().Imports(`unicode/utf8`)",
								Args: []ir.FilterExpr{{
									Line:  507,
									Op:    ir.FilterFileImportsOp,
									Src:   "m.File().Imports(`unicode/utf8`)",
									Value: "unicode/utf8",
								}},
							},
						},
					},
				},
			},
		},
		{
			Line:        515,
			Name:        "fprint",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln)",
			DocBefore:   "w.Write([]byte(fmt.Sprintf(\"%x\", 10)))",
			DocAfter:    "fmt.Fprintf(w, \"%x\", 10)",
			Rules: []ir.Rule{
				{
					Line:            516,
					SyntaxPatterns:  []ir.PatternString{{Line: 516, Value: "$w.Write([]byte(fmt.Sprint($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  517,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 517, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            520,
					SyntaxPatterns:  []ir.PatternString{{Line: 520, Value: "$w.Write([]byte(fmt.Sprintf($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  521,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 521, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            524,
					SyntaxPatterns:  []ir.PatternString{{Line: 524, Value: "$w.Write([]byte(fmt.Sprintln($*args)))"}},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  525,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args:  []ir.FilterExpr{{Line: 525, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"}},
					},
				},
				{
					Line:            528,
					SyntaxPatterns:  []ir.PatternString{{Line: 528, Value: "io.WriteString($w, fmt.Sprint($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
				},
				{
					Line:            531,
					SyntaxPatterns:  []ir.PatternString{{Line: 531, Value: "io.WriteString($w, fmt.Sprintf($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
				},
				{
					Line:            534,
					SyntaxPatterns:  []ir.PatternString{{Line: 534, Value: "io.WriteString($w, fmt.Sprintln($*args))"}},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
				},
			},
		},
		{
			Line:        542,
			Name:        "writeString",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects w.Write calls which can be replaced with w.WriteString",
			DocBefore:   "w.Write([]byte(\"foo\"))",
			DocAfter:    "w.WriteString(\"foo\")",
			Rules: []ir.Rule{{
				Line:            543,
				SyntaxPatterns:  []ir.PatternString{{Line: 543, Value: "$w.Write([]byte($s))"}},
				ReportTemplate:  "$$ => $w.WriteString($s)",
				SuggestTemplate: "$w.WriteString($s)",
				WhereExpr: ir.FilterExpr{
					Line: 544,
					Op:   ir.FilterAndOp,
					Src:  "m[\"w\"].Type.HasMethod(\"io.StringWriter.WriteString\") && m[\"s\"].Type.Is(`string`)",
					Args: []ir.FilterExpr{
						{
							Line:  544,
							Op:    ir.FilterVarTypeHasMethodOp,
							Src:   "m[\"w\"].Type.HasMethod(\"io.StringWriter.WriteString\")",
							Value: "w",
							Args:  []ir.FilterExpr{{Line: 544, Op: ir.FilterStringOp, Src: "\"io.StringWriter.WriteString\"", Value: "io.StringWriter.WriteString"}},
						},
						{
							Line:  544,
							Op:    ir.FilterVarTypeIsOp,
							Src:   "m[\"s\"].Type.Is(`string`)",
							Value: "s",
							Args:  []ir.FilterExpr{{Line: 544, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
						},
					},
				},
			}},
		},
		{
			Line:        552,
			Name:        "writeBytes",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects w.WriteString calls which can be replaced with w.Write",
			DocBefore:   "w.WriteString(buf.String())",
			DocAfter:    "w.Write(buf.Bytes())",
			Rules: []ir.Rule{
				{
					Line:            557,
					SyntaxPatterns:  []ir.PatternString{{Line: 557, Value: "io.WriteString($w, $buf.String())"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 558,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  558,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  558,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line:            561,
					SyntaxPatterns:  []ir.PatternString{{Line: 561, Value: "io.WriteString($w, string($buf.Bytes()))"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 562,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  562,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  562,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line:            565,
					SyntaxPatterns:  []ir.PatternString{{Line: 565, Value: "$w.WriteString($buf.String())"}},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 566,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.HasMethod(\"io.Writer.Write\") && isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  566,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(\"io.Writer.Write\")",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 566, Op: ir.FilterStringOp, Src: "\"io.Writer.Write\"", Value: "io.Writer.Write"}},
							},
							{
								Line: 566,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  566,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  566,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 554, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
						},
					},
				},
				{
					Line:            569,
					SyntaxPatterns:  []ir.PatternString{{Line: 569, Value: "$w.WriteString(string($b))"}},
					ReportTemplate:  "$$ => $w.Write($b)",
					SuggestTemplate: "$w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line: 570,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.HasMethod(\"io.Writer.Write\") && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  570,
								Op:    ir.FilterVarTypeHasMethodOp,
								Src:   "m[\"w\"].Type.HasMethod(\"io.Writer.Write\")",
								Value: "w",
								Args:  []ir.FilterExpr{{Line: 570, Op: ir.FilterStringOp, Src: "\"io.Writer.Write\"", Value: "io.Writer.Write"}},
							},
							{
								Line:  570,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 570, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        578,
			Name:        "bufferString",
			MatcherName: "m",
			DocTags:     []string{"o1", "score4"},
			DocSummary:  "Detects bytes.Buffer String() calls where Bytes() could be used instead",
			DocBefore:   "strings.Contains(buf.String(), string(b))",
			DocAfter:    "bytes.Contains(buf.Bytes(), b)",
			Rules: []ir.Rule{
				{
					Line:            583,
					SyntaxPatterns:  []ir.PatternString{{Line: 583, Value: "strings.$f($buf1.String(), $buf2.String())"}},
					ReportTemplate:  "$$ => bytes.$f($buf1.Bytes(), $buf2.Bytes())",
					SuggestTemplate: "bytes.$f($buf1.Bytes(), $buf2.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 585,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf1\"]) && isBuffer(m[\"buf2\"]) &&\n\tm[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
						Args: []ir.FilterExpr{
							{
								Line: 585,
								Op:   ir.FilterAndOp,
								Src:  "isBuffer(m[\"buf1\"]) && isBuffer(m[\"buf2\"])",
								Args: []ir.FilterExpr{
									{
										Line: 585,
										Op:   ir.FilterOrOp,
										Src:  "isBuffer(m[\"buf1\"])",
										Args: []ir.FilterExpr{
											{
												Line:  585,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf1\"].Type.Is(`bytes.Buffer`)",
												Value: "buf1",
												Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
											},
											{
												Line:  585,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf1\"].Type.Is(`*bytes.Buffer`)",
												Value: "buf1",
												Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
											},
										},
									},
									{
										Line: 585,
										Op:   ir.FilterOrOp,
										Src:  "isBuffer(m[\"buf2\"])",
										Args: []ir.FilterExpr{
											{
												Line:  585,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf2\"].Type.Is(`bytes.Buffer`)",
												Value: "buf2",
												Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
											},
											{
												Line:  585,
												Op:    ir.FilterVarTypeIsOp,
												Src:   "m[\"buf2\"].Type.Is(`*bytes.Buffer`)",
												Value: "buf2",
												Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
											},
										},
									},
								},
							},
							{
								Line:  586,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`Compare|Contains|HasPrefix|HasSuffix|EqualFold`)",
								Value: "f",
								Args:  []ir.FilterExpr{{Line: 586, Op: ir.FilterStringOp, Src: "`Compare|Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Compare|Contains|HasPrefix|HasSuffix|EqualFold"}},
							},
						},
					},
				},
				{
					Line:            590,
					SyntaxPatterns:  []ir.PatternString{{Line: 590, Value: "strings.Contains($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 591,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 591,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  591,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  591,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  591,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 591, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            593,
					SyntaxPatterns:  []ir.PatternString{{Line: 593, Value: "strings.HasPrefix($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 594,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 594,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  594,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  594,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  594,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 594, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            596,
					SyntaxPatterns:  []ir.PatternString{{Line: 596, Value: "strings.HasSuffix($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 597,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 597,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  597,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  597,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  597,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 597, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            599,
					SyntaxPatterns:  []ir.PatternString{{Line: 599, Value: "strings.Count($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Count($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 600,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 600,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  600,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  600,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  600,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 600, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            602,
					SyntaxPatterns:  []ir.PatternString{{Line: 602, Value: "strings.Index($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.Index($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Index($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 603,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 603,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  603,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  603,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  603,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 603, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            605,
					SyntaxPatterns:  []ir.PatternString{{Line: 605, Value: "strings.EqualFold($buf.String(), string($b))"}},
					ReportTemplate:  "$$ => bytes.EqualFold($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.EqualFold($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 606,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line: 606,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  606,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  606,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  606,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args:  []ir.FilterExpr{{Line: 606, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            609,
					SyntaxPatterns:  []ir.PatternString{{Line: 609, Value: "strings.Contains($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 610,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 610,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  610,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  610,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  610,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 610, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            612,
					SyntaxPatterns:  []ir.PatternString{{Line: 612, Value: "strings.HasPrefix($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 613,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 613,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  613,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  613,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  613,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 613, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            615,
					SyntaxPatterns:  []ir.PatternString{{Line: 615, Value: "strings.HasSuffix($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 616,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 616,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  616,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  616,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  616,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 616, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            618,
					SyntaxPatterns:  []ir.PatternString{{Line: 618, Value: "strings.Count($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Count($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 619,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 619,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  619,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  619,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  619,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 619, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            621,
					SyntaxPatterns:  []ir.PatternString{{Line: 621, Value: "strings.Index($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.Index($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Index($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 622,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 622,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  622,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  622,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  622,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 622, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            624,
					SyntaxPatterns:  []ir.PatternString{{Line: 624, Value: "strings.EqualFold($buf.String(), $s)"}},
					ReportTemplate:  "$$ => bytes.EqualFold($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.EqualFold($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 625,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							{
								Line: 625,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									{
										Line:  625,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
									},
									{
										Line:  625,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
									},
								},
							},
							{
								Line:  625,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args:  []ir.FilterExpr{{Line: 625, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
							},
						},
					},
				},
				{
					Line:            628,
					SyntaxPatterns:  []ir.PatternString{{Line: 628, Value: "[]byte($buf.String())"}},
					ReportTemplate:  "$$ => $buf.Bytes()",
					SuggestTemplate: "$buf.Bytes()",
					WhereExpr: ir.FilterExpr{
						Line: 628,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  628,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  628,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
				{
					Line: 630,
					SyntaxPatterns: []ir.PatternString{
						{Line: 630, Value: "fmt.Fprint($w, $buf.String())"},
						{Line: 630, Value: "fmt.Fprintf($w, \"%s\", $buf.String())"},
						{Line: 630, Value: "fmt.Fprintf($w, \"%v\", $buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 631,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							{
								Line:  631,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"}},
							},
							{
								Line:  631,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args:  []ir.FilterExpr{{Line: 580, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"}},
							},
						},
					},
				},
			},
		},
		{
			Line:        637,
			Name:        "rangeExprCopy",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects array range loops that result in an excessive full data copy",
			Rules: []ir.Rule{
				{
					Line: 638,
					SyntaxPatterns: []ir.PatternString{
						{Line: 638, Value: "for $_, $_ := range $e"},
						{Line: 638, Value: "for $_, $_ = range $e"},
					},
					ReportTemplate:  "$e => &$e",
					SuggestTemplate: "&$e",
					WhereExpr: ir.FilterExpr{
						Line: 639,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							{
								Line: 639,
								Op:   ir.FilterAndOp,
								Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`)",
								Args: []ir.FilterExpr{
									{
										Line:  639,
										Op:    ir.FilterVarAddressableOp,
										Src:   "m[\"e\"].Addressable",
										Value: "e",
									},
									{
										Line:  639,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
										Value: "e",
										Args:  []ir.FilterExpr{{Line: 639, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"}},
									},
								},
							},
							{
								Line: 639,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									{
										Line:  639,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									{
										Line:  639,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
				{
					Line: 645,
					SyntaxPatterns: []ir.PatternString{
						{Line: 645, Value: "for $_, $_ := range $e"},
						{Line: 645, Value: "for $_, $_ = range $e"},
					},
					ReportTemplate: "range over big array value expression is ineffective",
					WhereExpr: ir.FilterExpr{
						Line: 646,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							{
								Line:  646,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
								Value: "e",
								Args:  []ir.FilterExpr{{Line: 646, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"}},
							},
							{
								Line: 646,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									{
										Line:  646,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									{
										Line:  646,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
			},
		},
		{
			Line:        653,
			Name:        "rangeToAppend",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects range loops that can be turned into a single append call",
			Rules: []ir.Rule{{
				Line:            654,
				SyntaxPatterns:  []ir.PatternString{{Line: 654, Value: "for $_, $x := range $src { $dst = append($dst, $x) }"}},
				ReportTemplate:  "for ... { ... } => $dst = append($dst, $src...)",
				SuggestTemplate: "$dst = append($dst, $src...)",
				WhereExpr: ir.FilterExpr{
					Line:  655,
					Op:    ir.FilterVarTypeIsOp,
					Src:   "m[\"src\"].Type.Is(`[]$_`)",
					Value: "src",
					Args:  []ir.FilterExpr{{Line: 655, Op: ir.FilterStringOp, Src: "`[]$_`", Value: "[]$_"}},
				},
			}},
		},
		{
			Line:        662,
			Name:        "rangeRuneSlice",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects a range over []rune(string) where copying to a new slice is redundant",
			Rules: []ir.Rule{
				{
					Line:            663,
					SyntaxPatterns:  []ir.PatternString{{Line: 663, Value: "for _, $r := range []rune($s)"}},
					ReportTemplate:  "$$ => for _, $r := range $s",
					SuggestTemplate: "for _, $r := range $s",
					WhereExpr: ir.FilterExpr{
						Line:  664,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 664, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            667,
					SyntaxPatterns:  []ir.PatternString{{Line: 667, Value: "for _, $r = range []rune($s)"}},
					ReportTemplate:  "$$ => for _, $r = range $s",
					SuggestTemplate: "for _, $r = range $s",
					WhereExpr: ir.FilterExpr{
						Line:  668,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 668, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            671,
					SyntaxPatterns:  []ir.PatternString{{Line: 671, Value: "for range []rune($s)"}},
					ReportTemplate:  "$$ => for range $s",
					SuggestTemplate: "for range $s",
					WhereExpr: ir.FilterExpr{
						Line:  672,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args:  []ir.FilterExpr{{Line: 672, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
					},
				},
				{
					Line:            675,
					SyntaxPatterns:  []ir.PatternString{{Line: 675, Value: "for _, $r := range string($runes)"}},
					ReportTemplate:  "$$ => for _, $r := range $runes",
					SuggestTemplate: "for _, $r := range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  676,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args:  []ir.FilterExpr{{Line: 676, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"}},
					},
				},
				{
					Line:            679,
					SyntaxPatterns:  []ir.PatternString{{Line: 679, Value: "for _, $r = range string($runes)"}},
					ReportTemplate:  "$$ => for _, $r = range $runes",
					SuggestTemplate: "for _, $r = range $runes",
					WhereExpr: ir.FilterExpr{
						Line:  680,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args:  []ir.FilterExpr{{Line: 680, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"}},
					},
				},
			},
		},
		{
			Line:        686,
			Name:        "reflectDeepEqual",
			MatcherName: "m",
			DocTags:     []string{"o1", "score2"},
			DocSummary:  "Detects usages of reflect.DeepEqual that can be rewritten",
			Rules: []ir.Rule{
				{
					Line:            687,
					SyntaxPatterns:  []ir.PatternString{{Line: 687, Value: "reflect.DeepEqual($x, $y)"}},
					ReportTemplate:  "$$ => bytes.Equal($x, $y)",
					SuggestTemplate: "bytes.Equal($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 688,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`[]byte`) && m[\"y\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							{
								Line:  688,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args:  []ir.FilterExpr{{Line: 688, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
							{
								Line:  688,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`[]byte`)",
								Value: "y",
								Args:  []ir.FilterExpr{{Line: 688, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
							},
						},
					},
				},
				{
					Line:            695,
					SyntaxPatterns:  []ir.PatternString{{Line: 695, Value: "reflect.DeepEqual($x, $y)"}},
					ReportTemplate:  "$$ => ($x == $y)",
					SuggestTemplate: "($x == $y)",
					WhereExpr: ir.FilterExpr{
						Line: 696,
						Op:   ir.FilterOrOp,
						Src:  "(m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)) ||\n\t(m[\"x\"].Type.OfKind(`numeric`) && m[\"y\"].Type.OfKind(`numeric`))",
						Args: []ir.FilterExpr{
							{
								Line: 696,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`))",
								Args: []ir.FilterExpr{
									{
										Line:  696,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"x\"].Type.Is(`string`)",
										Value: "x",
										Args:  []ir.FilterExpr{{Line: 696, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
									{
										Line:  696,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"y\"].Type.Is(`string`)",
										Value: "y",
										Args:  []ir.FilterExpr{{Line: 696, Op: ir.FilterStringOp, Src: "`string`", Value: "string"}},
									},
								},
							},
							{
								Line: 697,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"x\"].Type.OfKind(`numeric`) && m[\"y\"].Type.OfKind(`numeric`))",
								Args: []ir.FilterExpr{
									{
										Line:  697,
										Op:    ir.FilterVarTypeOfKindOp,
										Src:   "m[\"x\"].Type.OfKind(`numeric`)",
										Value: "x",
										Args:  []ir.FilterExpr{{Line: 697, Op: ir.FilterStringOp, Src: "`numeric`", Value: "numeric"}},
									},
									{
										Line:  697,
										Op:    ir.FilterVarTypeOfKindOp,
										Src:   "m[\"y\"].Type.OfKind(`numeric`)",
										Value: "y",
										Args:  []ir.FilterExpr{{Line: 697, Op: ir.FilterStringOp, Src: "`numeric`", Value: "numeric"}},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			Line:        703,
			Name:        "reflectType",
			MatcherName: "m",
			DocTags:     []string{"o1", "score1"},
			DocSummary:  "Detects reflect Type() related patterns that can be optimized",
			Rules: []ir.Rule{
				{
					Line:            704,
					SyntaxPatterns:  []ir.PatternString{{Line: 704, Value: "reflect.ValueOf($x).Type()"}},
					ReportTemplate:  "$$ => reflect.TypeOf($x)",
					SuggestTemplate: "reflect.TypeOf($x)",
				},
				{
					Line:            706,
					SyntaxPatterns:  []ir.PatternString{{Line: 706, Value: "reflect.TypeOf($x.Interface())"}},
					ReportTemplate:  "$$ => $x.Type()",
					SuggestTemplate: "$x.Type()",
					WhereExpr: ir.FilterExpr{
						Line:  707,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`reflect.Value`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 707, Op: ir.FilterStringOp, Src: "`reflect.Value`", Value: "reflect.Value"}},
					},
				},
				{
					Line:            710,
					SyntaxPatterns:  []ir.PatternString{{Line: 710, Value: "fmt.Sprintf(\"%T\", $x.Interface())"}},
					ReportTemplate:  "$$ => $x.Type().String()",
					SuggestTemplate: "$x.Type().String()",
					WhereExpr: ir.FilterExpr{
						Line:  711,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`reflect.Value`)",
						Value: "x",
						Args:  []ir.FilterExpr{{Line: 711, Op: ir.FilterStringOp, Src: "`reflect.Value`", Value: "reflect.Value"}},
					},
				},
				{
					Line:            713,
					SyntaxPatterns:  []ir.PatternString{{Line: 713, Value: "fmt.Sprintf(\"%T\", $x)"}},
					ReportTemplate:  "$$ => reflect.TypeOf($x).String()",
					SuggestTemplate: "reflect.TypeOf($x).String()",
				},
			},
		},
		{
			Line:        719,
			Name:        "binaryWrite",
			MatcherName: "m",
			DocTags:     []string{"o1", "score3"},
			DocSummary:  "Detects binary.Write uses that can be optimized",
			Rules: []ir.Rule{
				{
					Line:            720,
					SyntaxPatterns:  []ir.PatternString{{Line: 720, Value: "$err := binary.Write($w, $_, $b)"}},
					ReportTemplate:  "$$ => _, $err := $w.Write($b)",
					SuggestTemplate: "_, $err := $w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line:  721,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args:  []ir.FilterExpr{{Line: 721, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"}},
					},
				},
				{
					Line:            724,
					SyntaxPatterns:  []ir.PatternString{{Line: 724, Value: "binary.Write($w, $_, $b)"}},
					ReportTemplate:  "$$ => $w.Write($b)",
					SuggestTemplate: "$w.Write($b)",
					WhereExpr: ir.FilterExpr{
						Line: 725,
						Op:   ir.FilterRootNodeParentIsOp,
						Src:  "m[\"$$\"].Node.Parent().Is(`ExprStmt`)",
						Args: []ir.FilterExpr{{Line: 725, Op: ir.FilterStringOp, Src: "`ExprStmt`", Value: "ExprStmt"}},
					},
				},
			},
		},
	},
}

