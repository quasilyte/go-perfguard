// Code generated by "precompile.go". DO NOT EDIT.

package rulesdata

import "github.com/quasilyte/go-ruleguard/ruleguard/ir"

var Universal = &ir.File{
	PkgPath:       "gorules",
	CustomDecls:   []string{},
	BundleImports: []ir.BundleImport{},
	RuleGroups: []ir.RuleGroup{
		ir.RuleGroup{
			Line:        27,
			Name:        "stringsCut",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects use cases for strings.Cut",
			DocBefore:  "email := strings.Split(s, \"@\")[0]",
			DocAfter:   "email, _, _ := strings.Cut(s, \"@\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 28,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 28, Value: "$dst := strings.Split($s, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ := strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ := strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  29,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				ir.Rule{
					Line: 31,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 31, Value: "$dst = strings.Split($s, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ = strings.Cut($s, $sep)",
					SuggestTemplate: "$dst, _, _ = strings.Cut($s, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  32,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				ir.Rule{
					Line: 35,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 35, Value: "$dst := bytes.Split($b, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ := bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ := bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  36,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
				ir.Rule{
					Line: 38,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 38, Value: "$dst = bytes.Split($b, $sep)[0]"},
					},
					ReportTemplate:  "$$ => $dst, _, _ = bytes.Cut($b, $sep)",
					SuggestTemplate: "$dst, _, _ = bytes.Cut($b, $sep)",
					WhereExpr: ir.FilterExpr{
						Line:  39,
						Op:    ir.FilterGoVersionGreaterEqThanOp,
						Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
						Value: "1.18",
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        47,
			Name:        "stringsClone",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects use cases for strings.Clone",
			DocBefore:  "s2 := string([]byte(s1))",
			DocAfter:   "s2 := strings.Clone(s1)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 48,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 48, Value: "string([]byte($s))"},
					},
					ReportTemplate:  "$$ => strings.Clone($s)",
					SuggestTemplate: "strings.Clone($s)",
					WhereExpr: ir.FilterExpr{
						Line: 49,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const &&\n\tm.GoVersion().GreaterEqThan(\"1.18\")",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 49,
								Op:   ir.FilterAndOp,
								Src:  "m[\"s\"].Type.Is(`string`) &&\n\t!m[\"s\"].Const",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  49,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 49, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
									ir.FilterExpr{
										Line: 50,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"s\"].Const",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  50,
												Op:    ir.FilterVarConstOp,
												Src:   "m[\"s\"].Const",
												Value: "s",
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  51,
								Op:    ir.FilterGoVersionGreaterEqThanOp,
								Src:   "m.GoVersion().GreaterEqThan(\"1.18\")",
								Value: "1.18",
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        59,
			Name:        "equalFold",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects unoptimal strings/bytes case-insensitive comparison",
			DocBefore:  "strings.ToLower(x) == strings.ToLower(y)",
			DocAfter:   "strings.EqualFold(x, y)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 61,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 62, Value: "strings.ToLower($x) == $y"},
						ir.PatternString{Line: 63, Value: "strings.ToLower($x) == strings.ToLower($y)"},
						ir.PatternString{Line: 64, Value: "$x == strings.ToLower($y)"},
						ir.PatternString{Line: 65, Value: "strings.ToUpper($x) == $y"},
						ir.PatternString{Line: 66, Value: "strings.ToUpper($x) == strings.ToUpper($y)"},
						ir.PatternString{Line: 67, Value: "$x == strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => strings.EqualFold($x, $y)",
					SuggestTemplate: "strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 68,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 68,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 68, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 68, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 68,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 68, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 68, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 72,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 73, Value: "strings.ToLower($x) != $y"},
						ir.PatternString{Line: 74, Value: "strings.ToLower($x) != strings.ToLower($y)"},
						ir.PatternString{Line: 75, Value: "$x != strings.ToLower($y)"},
						ir.PatternString{Line: 76, Value: "strings.ToUpper($x) != $y"},
						ir.PatternString{Line: 77, Value: "strings.ToUpper($x) != strings.ToUpper($y)"},
						ir.PatternString{Line: 78, Value: "$x != strings.ToUpper($y)"},
					},
					ReportTemplate:  "$$ => !strings.EqualFold($x, $y)",
					SuggestTemplate: "!strings.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 79,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 79,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 79, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 79, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 79,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 79, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 79, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 83,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 84, Value: "bytes.Equal(bytes.ToLower($x), $y)"},
						ir.PatternString{Line: 85, Value: "bytes.Equal(bytes.ToLower($x), bytes.ToLower($y))"},
						ir.PatternString{Line: 86, Value: "bytes.Equal($x, bytes.ToLower($y))"},
						ir.PatternString{Line: 87, Value: "bytes.Equal(bytes.ToUpper($x), $y)"},
						ir.PatternString{Line: 88, Value: "bytes.Equal(bytes.ToUpper($x), bytes.ToUpper($y))"},
						ir.PatternString{Line: 89, Value: "bytes.Equal($x, bytes.ToUpper($y))"},
					},
					ReportTemplate:  "$$ => bytes.EqualFold($x, $y)",
					SuggestTemplate: "bytes.EqualFold($x, $y)",
					WhereExpr: ir.FilterExpr{
						Line: 90,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Pure && m[\"y\"].Pure && m[\"x\"].Text != m[\"y\"].Text",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 90,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure && m[\"y\"].Pure",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 90, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
									ir.FilterExpr{Line: 90, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
								},
							},
							ir.FilterExpr{
								Line: 90,
								Op:   ir.FilterNeqOp,
								Src:  "m[\"x\"].Text != m[\"y\"].Text",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 90, Op: ir.FilterVarTextOp, Src: "m[\"x\"].Text", Value: "x"},
									ir.FilterExpr{Line: 90, Op: ir.FilterVarTextOp, Src: "m[\"y\"].Text", Value: "y"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        96,
			Name:        "redundantSprint",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects redundant fmt.Sprint calls",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 97,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 97, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 97, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 97, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.String()",
					SuggestTemplate: "$x.String()",
					WhereExpr: ir.FilterExpr{
						Line:  98,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 98, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
						},
					},
				},
				ir.Rule{
					Line: 101,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 101, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 101, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 101, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x.Error()",
					SuggestTemplate: "$x.Error()",
					WhereExpr: ir.FilterExpr{
						Line:  102,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"x\"].Type.Implements(`error`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 102, Op: ir.FilterStringOp, Src: "`error`", Value: "error"},
						},
					},
				},
				ir.Rule{
					Line: 105,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 105, Value: "fmt.Sprint($x)"},
						ir.PatternString{Line: 105, Value: "fmt.Sprintf(\"%s\", $x)"},
						ir.PatternString{Line: 105, Value: "fmt.Sprintf(\"%v\", $x)"},
					},
					ReportTemplate:  "$$ => $x",
					SuggestTemplate: "$x",
					WhereExpr: ir.FilterExpr{
						Line:  106,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`string`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 106, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        114,
			Name:        "sliceClone",
			MatcherName: "m",
			DocTags: []string{
				"o2",
			},
			DocSummary: "Detects slice copying patterns that can be optimized",
			DocBefore:  "dst := append([]int(nil), src...)",
			DocAfter:   "dst := make([]int, len(src)); copy(dst, src)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 115,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 115, Value: "$dst = append([]$elem(nil), $src...)"},
						ir.PatternString{Line: 115, Value: "$dst = append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst = make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst = make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 116,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  116,
								Op:    ir.FilterVarTypeHasPointersOp,
								Src:   "m[\"elem\"].Type.HasPointers()",
								Value: "elem",
							},
						},
					},
				},
				ir.Rule{
					Line: 118,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 118, Value: "$dst := append([]$elem(nil), $src...)"},
						ir.PatternString{Line: 118, Value: "$dst := append([]$elem{}, $src...)"},
					},
					ReportTemplate:  "$$ => $dst := make([]$elem, len($src)); copy($dst, $src)",
					SuggestTemplate: "$dst := make([]$elem, len($src)); copy($dst, $src)",
					WhereExpr: ir.FilterExpr{
						Line: 119,
						Op:   ir.FilterNotOp,
						Src:  "!m[\"elem\"].Type.HasPointers()",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  119,
								Op:    ir.FilterVarTypeHasPointersOp,
								Src:   "m[\"elem\"].Type.HasPointers()",
								Value: "elem",
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        125,
			Name:        "stringsJoinConcat",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detect strings.Join usages that can be rewritten as a string concat",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 126,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 126, Value: "strings.Join([]string{$x, $y}, \"\")"},
					},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
				},
				ir.Rule{
					Line: 127,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 127, Value: "strings.Join([]string{$x, $y, $z}, \"\")"},
					},
					ReportTemplate:  "$$ => $x + $y + $z",
					SuggestTemplate: "$x + $y + $z",
				},
				ir.Rule{
					Line: 129,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 129, Value: "strings.Join([]string{$x, $y}, $glue)"},
					},
					ReportTemplate:  "$$ => $x + $glue + $y",
					SuggestTemplate: "$x + $glue + $y",
				},
				ir.Rule{
					Line: 131,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 131, Value: "strings.Join([]string{$x, $y, $z}, $glue)"},
					},
					ReportTemplate:  "$$ => $x + $glue + $y + $glue + $z",
					SuggestTemplate: "$x + $glue + $y + $glue + $z",
					WhereExpr:       ir.FilterExpr{Line: 132, Op: ir.FilterVarPureOp, Src: "m[\"glue\"].Pure", Value: "glue"},
				},
			},
		},
		ir.RuleGroup{
			Line:        140,
			Name:        "sprintConcat",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects sprint calls that can be rewritten as a string concat",
			DocBefore:  "fmt.Sprintf(\"%s%s\", x, y)",
			DocAfter:   "x + y",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 141,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 141, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"},
					},
					ReportTemplate:  "$$ => $x + $y",
					SuggestTemplate: "$x + $y",
					WhereExpr: ir.FilterExpr{
						Line: 142,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Is(`string`) && m[\"y\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  142,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 142, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  142,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"y\"].Type.Is(`string`)",
								Value: "y",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 142, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 145,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 145, Value: "fmt.Sprintf(\"%s%s\", $x, $y)"},
					},
					ReportTemplate:  "$$ => $x.String() + $y.String()",
					SuggestTemplate: "$x.String() + $y.String()",
					WhereExpr: ir.FilterExpr{
						Line: 146,
						Op:   ir.FilterAndOp,
						Src:  "m[\"x\"].Type.Implements(`fmt.Stringer`) && m[\"y\"].Type.Implements(`fmt.Stringer`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  146,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"x\"].Type.Implements(`fmt.Stringer`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 146, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
								},
							},
							ir.FilterExpr{
								Line:  146,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"y\"].Type.Implements(`fmt.Stringer`)",
								Value: "y",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 146, Op: ir.FilterStringOp, Src: "`fmt.Stringer`", Value: "fmt.Stringer"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        154,
			Name:        "strconv",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects fmt uses that can be replaced with strconv",
			DocBefore:  "fmt.Sprintf(\"%d\", i)",
			DocAfter:   "strconv.Itoa(i)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 158,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 158, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 158, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 158, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.Itoa($x)",
					SuggestTemplate: "strconv.Itoa($x)",
					WhereExpr: ir.FilterExpr{
						Line:  159,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 159, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 163,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 163, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 163, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 163, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 10)",
					SuggestTemplate: "strconv.FormatInt($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  164,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 164, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"},
						},
					},
				},
				ir.Rule{
					Line: 165,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 165, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt($x, 16)",
					SuggestTemplate: "strconv.FormatInt($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  166,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`int64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 166, Op: ir.FilterStringOp, Src: "`int64`", Value: "int64"},
						},
					},
				},
				ir.Rule{
					Line: 167,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 167, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 167, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 167, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 10)",
					SuggestTemplate: "strconv.FormatUint($x, 10)",
					WhereExpr: ir.FilterExpr{
						Line:  168,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 168, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"},
						},
					},
				},
				ir.Rule{
					Line: 169,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 169, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint($x, 16)",
					SuggestTemplate: "strconv.FormatUint($x, 16)",
					WhereExpr: ir.FilterExpr{
						Line:  170,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"x\"].Type.Is(`uint64`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 170, Op: ir.FilterStringOp, Src: "`uint64`", Value: "uint64"},
						},
					},
				},
				ir.Rule{
					Line: 172,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 172, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 172, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 172, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 10)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  173,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 173, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 174,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 174, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatInt(int64($x), 16)",
					SuggestTemplate: "strconv.FormatInt(int64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  175,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`int`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 175, Op: ir.FilterStringOp, Src: "`int`", Value: "int"},
						},
					},
				},
				ir.Rule{
					Line: 177,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 177, Value: "fmt.Sprintf(\"%d\", $x)"},
						ir.PatternString{Line: 177, Value: "fmt.Sprintf(\"%v\", $x)"},
						ir.PatternString{Line: 177, Value: "fmt.Sprint($x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 10)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 10)",
					WhereExpr: ir.FilterExpr{
						Line:  178,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 178, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"},
						},
					},
				},
				ir.Rule{
					Line: 179,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 179, Value: "fmt.Sprintf(\"%x\", $x)"},
					},
					ReportTemplate:  "$$ => strconv.FormatUint(uint64($x), 16)",
					SuggestTemplate: "strconv.FormatUint(uint64($x), 16)",
					WhereExpr: ir.FilterExpr{
						Line:  180,
						Op:    ir.FilterVarTypeOfKindOp,
						Src:   "m[\"x\"].Type.OfKind(`uint`)",
						Value: "x",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 180, Op: ir.FilterStringOp, Src: "`uint`", Value: "uint"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        187,
			Name:        "appendAPI",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects cases that can benefit from append-friendly APIs",
			DocBefore:  "b = append(b, strconv.Itoa(v)...)",
			DocAfter:   "b = strconv.AppendInt(b, v, 10)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 195,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 195, Value: "$b = append($b, strconv.Itoa($x)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, int64($x), 10)",
					SuggestTemplate: "$b = strconv.AppendInt($b, int64($x), 10)",
				},
				ir.Rule{
					Line: 197,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 197, Value: "$b = append($b, strconv.FormatInt($x, $base)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendInt($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendInt($b, $x, $base)",
				},
				ir.Rule{
					Line: 199,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 199, Value: "$b = append($b, strconv.FormatUint($x, $base)...)"},
					},
					ReportTemplate:  "$$ => $b = strconv.AppendUint($b, $x, $base)",
					SuggestTemplate: "$b = strconv.AppendUint($b, $x, $base)",
				},
				ir.Rule{
					Line: 202,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 202, Value: "$b = append($b, $t.Format($layout)...)"},
					},
					ReportTemplate:  "$$ => $b = $t.AppendFormat($b, $layout)",
					SuggestTemplate: "$b = $t.AppendFormat($b, $layout)",
					WhereExpr: ir.FilterExpr{
						Line: 203,
						Op:   ir.FilterOrOp,
						Src:  "m[\"t\"].Type.Is(`time.Time`) || m[\"t\"].Type.Is(`*time.Time`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  203,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`time.Time`)",
								Value: "t",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 203, Op: ir.FilterStringOp, Src: "`time.Time`", Value: "time.Time"},
								},
							},
							ir.FilterExpr{
								Line:  203,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"t\"].Type.Is(`*time.Time`)",
								Value: "t",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 203, Op: ir.FilterStringOp, Src: "`*time.Time`", Value: "*time.Time"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 206,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 206, Value: "$b = append($b, $v.String()...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, 'g', 10)",
					SuggestTemplate: "$b = $v.Append($b, 'g', 10)",
					WhereExpr: ir.FilterExpr{
						Line: 207,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  207,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 207, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"},
								},
							},
							ir.FilterExpr{
								Line:  207,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 207, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 209,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 209, Value: "$b = append($b, $v.Text($format, $prec)...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, $format, $prec)",
					SuggestTemplate: "$b = $v.Append($b, $format, $prec)",
					WhereExpr: ir.FilterExpr{
						Line: 210,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Float`) || m[\"v\"].Type.Is(`*big.Float`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  210,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 210, Op: ir.FilterStringOp, Src: "`big.Float`", Value: "big.Float"},
								},
							},
							ir.FilterExpr{
								Line:  210,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Float`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 210, Op: ir.FilterStringOp, Src: "`*big.Float`", Value: "*big.Float"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 213,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 213, Value: "$b = append($b, $v.String()...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, 10)",
					SuggestTemplate: "$b = $v.Append($b, 10)",
					WhereExpr: ir.FilterExpr{
						Line: 214,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  214,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 214, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"},
								},
							},
							ir.FilterExpr{
								Line:  214,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 214, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 216,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 216, Value: "$b = append($b, $v.Text($base)...)"},
					},
					ReportTemplate:  "$$ => $b = $v.Append($b, $base)",
					SuggestTemplate: "$b = $v.Append($b, $base)",
					WhereExpr: ir.FilterExpr{
						Line: 217,
						Op:   ir.FilterOrOp,
						Src:  "m[\"v\"].Type.Is(`big.Int`) || m[\"v\"].Type.Is(`*big.Int`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  217,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 217, Op: ir.FilterStringOp, Src: "`big.Int`", Value: "big.Int"},
								},
							},
							ir.FilterExpr{
								Line:  217,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"v\"].Type.Is(`*big.Int`)",
								Value: "v",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 217, Op: ir.FilterStringOp, Src: "`*big.Int`", Value: "*big.Int"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        225,
			Name:        "convReorder",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects patterns that can be reordered to make the code faster",
			DocBefore:  "strings.TrimSpace(string(b))",
			DocAfter:   "string(bytes.TrimSpace(b))",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 231,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 231, Value: "strings.TrimSpace(string($b))"},
					},
					ReportTemplate:  "$$ => string(bytes.TrimSpace($b))",
					SuggestTemplate: "string(bytes.TrimSpace($b))",
					WhereExpr: ir.FilterExpr{
						Line:  232,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 232, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
						},
					},
				},
				ir.Rule{
					Line: 235,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 235, Value: "bytes.TrimSpace([]byte($s))"},
					},
					ReportTemplate:  "$$ => []byte(strings.TrimSpace($s))",
					SuggestTemplate: "[]byte(strings.TrimSpace($s))",
					WhereExpr: ir.FilterExpr{
						Line:  236,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 236, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        244,
			Name:        "stringCopyElim",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects redundant conversions between string and []byte",
			DocBefore:  "copy(b, []byte(s))",
			DocAfter:   "copy(b, s)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 245,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 245, Value: "copy($b, []byte($s))"},
					},
					ReportTemplate:  "$$ => copy($b, $s)",
					SuggestTemplate: "copy($b, $s)",
					WhereExpr: ir.FilterExpr{
						Line:  246,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 246, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 249,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 249, Value: "append($b, []byte($s)...)"},
					},
					ReportTemplate:  "$$ => append($b, $s...)",
					SuggestTemplate: "append($b, $s...)",
					WhereExpr: ir.FilterExpr{
						Line:  250,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"s\"].Type.Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 250, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 253,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 253, Value: "len(string($b))"},
					},
					ReportTemplate:  "$$ => len($b)",
					SuggestTemplate: "len($b)",
					WhereExpr: ir.FilterExpr{
						Line:  253,
						Op:    ir.FilterVarTypeIsOp,
						Src:   "m[\"b\"].Type.Is(`[]byte`)",
						Value: "b",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 253, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
						},
					},
				},
				ir.Rule{
					Line: 255,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 255, Value: "[]byte(strings.$f(string($b)))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b)",
					SuggestTemplate: "bytes.$f($b)",
					WhereExpr: ir.FilterExpr{
						Line: 256,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  256,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 256, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
							ir.FilterExpr{
								Line:  257,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`ToUpper|ToLower|TrimSpace`)",
								Value: "f",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 257, Op: ir.FilterStringOp, Src: "`ToUpper|ToLower|TrimSpace`", Value: "ToUpper|ToLower|TrimSpace"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 260,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 260, Value: "[]byte(strings.$f(string($b), $s2))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b, []byte($s2))",
					SuggestTemplate: "bytes.$f($b, []byte($s2))",
					WhereExpr: ir.FilterExpr{
						Line: 261,
						Op:   ir.FilterAndOp,
						Src:  "m[\"b\"].Type.Is(`[]byte`) &&\n\tm[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  261,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 261, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
							ir.FilterExpr{
								Line:  262,
								Op:    ir.FilterVarTextMatchesOp,
								Src:   "m[\"f\"].Text.Matches(`TrimPrefix|TrimSuffix`)",
								Value: "f",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 262, Op: ir.FilterStringOp, Src: "`TrimPrefix|TrimSuffix`", Value: "TrimPrefix|TrimSuffix"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        270,
			Name:        "regexpStringCopyElim",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects inefficient regexp usage in regard to string/[]byte conversions",
			DocBefore:  "regexp.ReplaceAll([]byte(s), []byte(\"foo\"))",
			DocAfter:   "regexp.ReplaceAllString(s, \"foo\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 273,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 273, Value: "$re.Match([]byte($s))"},
					},
					ReportTemplate:  "$$ => $re.MatchString($s)",
					SuggestTemplate: "$re.MatchString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 274,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  274,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 274, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  274,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 274, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 277,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 277, Value: "$re.FindIndex([]byte($s))"},
					},
					ReportTemplate:  "$$ => $re.FindStringIndex($s)",
					SuggestTemplate: "$re.FindStringIndex($s)",
					WhereExpr: ir.FilterExpr{
						Line: 278,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  278,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 278, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  278,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 278, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 281,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 281, Value: "$re.FindAllIndex([]byte($s), $n)"},
					},
					ReportTemplate:  "$$ => $re.FindAllStringIndex($s, $n)",
					SuggestTemplate: "$re.FindAllStringIndex($s, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 282,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  282,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 282, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  282,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 282, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 285,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 285, Value: "string($re.ReplaceAll([]byte($s), []byte($s2)))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, $s2)",
					SuggestTemplate: "$re.ReplaceAllString($s, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 286,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 286,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  286,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 286, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  286,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 286, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  286,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 286, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 289,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 289, Value: "string($re.ReplaceAll([]byte($s), $b))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAllString($s, string($b))",
					SuggestTemplate: "$re.ReplaceAllString($s, string($b))",
					WhereExpr: ir.FilterExpr{
						Line: 290,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 290,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"s\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  290,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 290, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  290,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s\"].Type.Is(`string`)",
										Value: "s",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 290, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  290,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 290, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 295,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 295, Value: "$re.MatchString(string($b))"},
					},
					ReportTemplate:  "$$ => $re.Match($b)",
					SuggestTemplate: "$re.Match($b)",
					WhereExpr: ir.FilterExpr{
						Line: 296,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  296,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 296, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  296,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 296, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 299,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 299, Value: "$re.FindStringIndex(string($b))"},
					},
					ReportTemplate:  "$$ => $re.FindIndex($b)",
					SuggestTemplate: "$re.FindIndex($b)",
					WhereExpr: ir.FilterExpr{
						Line: 300,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  300,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 300, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  300,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 300, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 303,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 303, Value: "$re.FindAllStringIndex(string($b), $n)"},
					},
					ReportTemplate:  "$$ => $re.FindAllIndex($b, $n)",
					SuggestTemplate: "$re.FindAllIndex($b, $n)",
					WhereExpr: ir.FilterExpr{
						Line: 304,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  304,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
								Value: "re",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 304, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
								},
							},
							ir.FilterExpr{
								Line:  304,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 304, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 307,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 307, Value: "[]byte($re.ReplaceAllString(string($b), string($b2)))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, $b2)",
					SuggestTemplate: "$re.ReplaceAll($b, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 308,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 308,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  308,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 308, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  308,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 308, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  308,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 308, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 311,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 311, Value: "[]byte($re.ReplaceAllString(string($b), $s))"},
					},
					ReportTemplate:  "$$ => $re.ReplaceAll($b, []byte($s))",
					SuggestTemplate: "$re.ReplaceAll($b, []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 312,
						Op:   ir.FilterAndOp,
						Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 312,
								Op:   ir.FilterAndOp,
								Src:  "m[\"re\"].Type.Is(`*regexp.Regexp`) && m[\"b\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  312,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"re\"].Type.Is(`*regexp.Regexp`)",
										Value: "re",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 312, Op: ir.FilterStringOp, Src: "`*regexp.Regexp`", Value: "*regexp.Regexp"},
										},
									},
									ir.FilterExpr{
										Line:  312,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b\"].Type.Is(`[]byte`)",
										Value: "b",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 312, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  312,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 312, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        321,
			Name:        "indexAlloc",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects strings.Index()-like calls that may allocate more than they should",
			DocBefore:  "strings.Index(string(x), y)",
			DocAfter:   "bytes.Index(x, []byte(y))",
			DocNote:    "See Go issue for details: https://github.com/golang/go/issues/25864",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 325,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 325, Value: "strings.$f(string($b1), string($b2))"},
					},
					ReportTemplate:  "$$ => bytes.$f($b1, $b2)",
					SuggestTemplate: "bytes.$f($b1, $b2)",
					WhereExpr: ir.FilterExpr{
						Line: 326,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`) && m[\"b2\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 326,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"b1\"].Type.Is(`[]byte`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  326,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 326, Op: ir.FilterStringOp, Src: "`Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Contains|HasPrefix|HasSuffix|EqualFold"},
										},
									},
									ir.FilterExpr{
										Line:  327,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"b1\"].Type.Is(`[]byte`)",
										Value: "b1",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 327, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  327,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b2\"].Type.Is(`[]byte`)",
								Value: "b2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 327, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 330,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 330, Value: "bytes.$f([]byte($s1), []byte($s2))"},
					},
					ReportTemplate:  "$$ => strings.$f($s1, $s2)",
					SuggestTemplate: "strings.$f($s1, $s2)",
					WhereExpr: ir.FilterExpr{
						Line: 331,
						Op:   ir.FilterAndOp,
						Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`) && m[\"s2\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 331,
								Op:   ir.FilterAndOp,
								Src:  "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`) &&\n\tm[\"s1\"].Type.Is(`string`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  331,
										Op:    ir.FilterVarTextMatchesOp,
										Src:   "m[\"f\"].Text.Matches(`Contains|HasPrefix|HasSuffix|EqualFold`)",
										Value: "f",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 331, Op: ir.FilterStringOp, Src: "`Contains|HasPrefix|HasSuffix|EqualFold`", Value: "Contains|HasPrefix|HasSuffix|EqualFold"},
										},
									},
									ir.FilterExpr{
										Line:  332,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"s1\"].Type.Is(`string`)",
										Value: "s1",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 332, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  332,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s2\"].Type.Is(`string`)",
								Value: "s2",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 332, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 341,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 341, Value: "strings.Index(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.Index($x, []byte($y))",
					SuggestTemplate: "bytes.Index($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 341,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 341,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 341,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 341, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 341, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 337,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  341,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 337, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  341,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 338, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 342,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 342, Value: "strings.Contains(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.Contains($x, []byte($y))",
					SuggestTemplate: "bytes.Contains($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 342,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 342,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 342,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 342, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 342, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 337,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  342,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 337, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  342,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 338, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 343,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 343, Value: "strings.HasPrefix(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($x, []byte($y))",
					SuggestTemplate: "bytes.HasPrefix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 343,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 343,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 343,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 343, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 343, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 337,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  343,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 337, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  343,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 338, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 344,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 344, Value: "strings.HasSuffix(string($x), $y)"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($x, []byte($y))",
					SuggestTemplate: "bytes.HasSuffix($x, []byte($y))",
					WhereExpr: ir.FilterExpr{
						Line: 344,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeStrings(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 344,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 344,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 344, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 344, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 337,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  344,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 337, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  344,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`[]byte`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 338, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 352,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 352, Value: "bytes.Index([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.Index($x, string($y))",
					SuggestTemplate: "strings.Index($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 352,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 352,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 352,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 352, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 352, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 348,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  352,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  352,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 349, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 353,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 353, Value: "bytes.Contains([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.Contains($x, string($y))",
					SuggestTemplate: "strings.Contains($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 353,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 353,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 353,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 353, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 353, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 348,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  353,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  353,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 349, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 354,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 354, Value: "bytes.HasPrefix([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.HasPrefix($x, string($y))",
					SuggestTemplate: "strings.HasPrefix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 354,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 354,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 354,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 354, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 354, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 348,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  354,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  354,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 349, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 355,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 355, Value: "bytes.HasSuffix([]byte($x), $y)"},
					},
					ReportTemplate:  "$$ => strings.HasSuffix($x, string($y))",
					SuggestTemplate: "strings.HasSuffix($x, string($y))",
					WhereExpr: ir.FilterExpr{
						Line: 355,
						Op:   ir.FilterAndOp,
						Src:  "canOptimizeBytes(m)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 355,
								Op:   ir.FilterAndOp,
								Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure &&\n\t!m[\"y\"].Node.Is(`CallExpr`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line: 355,
										Op:   ir.FilterAndOp,
										Src:  "m[\"x\"].Pure &&\n\n\tm[\"y\"].Pure",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 355, Op: ir.FilterVarPureOp, Src: "m[\"x\"].Pure", Value: "x"},
											ir.FilterExpr{Line: 355, Op: ir.FilterVarPureOp, Src: "m[\"y\"].Pure", Value: "y"},
										},
									},
									ir.FilterExpr{
										Line: 348,
										Op:   ir.FilterNotOp,
										Src:  "!m[\"y\"].Node.Is(`CallExpr`)",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  355,
												Op:    ir.FilterVarNodeIsOp,
												Src:   "m[\"y\"].Node.Is(`CallExpr`)",
												Value: "y",
												Args: []ir.FilterExpr{
													ir.FilterExpr{Line: 348, Op: ir.FilterStringOp, Src: "`CallExpr`", Value: "CallExpr"},
												},
											},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  355,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"x\"].Type.Is(`string`)",
								Value: "x",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 349, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        362,
			Name:        "writeByte",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead",
			DocBefore:  "w.WriteRune('\\n')",
			DocAfter:   "w.WriteByte('\\n')",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 366,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 366, Value: "$w.WriteRune($c)"},
					},
					ReportTemplate:  "$$ => $w.WriteByte($c)",
					SuggestTemplate: "$w.WriteByte($c)",
					WhereExpr: ir.FilterExpr{
						Line: 367,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.ByteWriter\") && (m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  367,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.ByteWriter\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 367, Op: ir.FilterStringOp, Src: "\"io.ByteWriter\"", Value: "io.ByteWriter"},
								},
							},
							ir.FilterExpr{
								Line: 367,
								Op:   ir.FilterAndOp,
								Src:  "(m[\"c\"].Const && m[\"c\"].Value.Int() < runeSelf)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  367,
										Op:    ir.FilterVarConstOp,
										Src:   "m[\"c\"].Const",
										Value: "c",
									},
									ir.FilterExpr{
										Line: 367,
										Op:   ir.FilterLtOp,
										Src:  "m[\"c\"].Value.Int() < runeSelf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{
												Line:  367,
												Op:    ir.FilterVarValueIntOp,
												Src:   "m[\"c\"].Value.Int()",
												Value: "c",
											},
											ir.FilterExpr{
												Line:  367,
												Op:    ir.FilterIntOp,
												Src:   "runeSelf",
												Value: int64(128),
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        375,
			Name:        "sliceClear",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects slice clear loops, suggests an idiom that is recognized by the Go compiler",
			DocBefore:  "for i := 0; i < len(buf); i++ { buf[i] = 0 }",
			DocAfter:   "for i := range buf { buf[i] = 0 }",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 376,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 376, Value: "for $i := 0; $i < len($xs); $i++ { $xs[$i] = $zero }"},
					},
					ReportTemplate:  "for ... { ... } => for $i := range $xs { $xs[$i] = $zero }",
					SuggestTemplate: "for $i := range $xs { $xs[$i] = $zero }",
					WhereExpr: ir.FilterExpr{
						Line: 377,
						Op:   ir.FilterEqOp,
						Src:  "m[\"zero\"].Value.Int() == 0",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  377,
								Op:    ir.FilterVarValueIntOp,
								Src:   "m[\"zero\"].Value.Int()",
								Value: "zero",
							},
							ir.FilterExpr{
								Line:  377,
								Op:    ir.FilterIntOp,
								Src:   "0",
								Value: int64(0),
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        387,
			Name:        "utf8DecodeRune",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation",
			DocBefore:  "r := []rune(s)[0]",
			DocAfter:   "r, _ := utf8.DecodeRuneInString(s)",
			DocNote:    "See Go issue for details: https://github.com/golang/go/issues/45260",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 394,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 394, Value: "$ch := []rune($s)[0]"},
					},
					ReportTemplate:  "$$ => $ch, _ := utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ := utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 395,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  395,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 395, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  395,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				ir.Rule{
					Line: 398,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 398, Value: "$ch = []rune($s)[0]"},
					},
					ReportTemplate:  "$$ => $ch, _ = utf8.DecodeRuneInString($ch)",
					SuggestTemplate: "$ch, _ = utf8.DecodeRuneInString($ch)",
					WhereExpr: ir.FilterExpr{
						Line: 399,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  399,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 399, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line:  399,
								Op:    ir.FilterFileImportsOp,
								Src:   "m.File().Imports(`unicode/utf8`)",
								Value: "unicode/utf8",
							},
						},
					},
				},
				ir.Rule{
					Line: 404,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 404, Value: "[]rune($s)[0]"},
					},
					ReportTemplate: "use utf8.DecodeRuneInString($s) here",
					WhereExpr: ir.FilterExpr{
						Line: 405,
						Op:   ir.FilterAndOp,
						Src:  "m[\"s\"].Type.Is(`string`) && !m.File().Imports(`unicode/utf8`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  405,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 405, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
							ir.FilterExpr{
								Line: 405,
								Op:   ir.FilterNotOp,
								Src:  "!m.File().Imports(`unicode/utf8`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  405,
										Op:    ir.FilterFileImportsOp,
										Src:   "m.File().Imports(`unicode/utf8`)",
										Value: "unicode/utf8",
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        413,
			Name:        "fprint",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln)",
			DocBefore:  "w.Write([]byte(fmt.Sprintf(\"%x\", 10)))",
			DocAfter:   "fmt.Fprintf(w, \"%x\", 10)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 414,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 414, Value: "$w.Write([]byte(fmt.Sprint($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  415,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 415, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 418,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 418, Value: "$w.Write([]byte(fmt.Sprintf($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  419,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 419, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 422,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 422, Value: "$w.Write([]byte(fmt.Sprintln($*args)))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
					WhereExpr: ir.FilterExpr{
						Line:  423,
						Op:    ir.FilterVarTypeImplementsOp,
						Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
						Value: "w",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 423, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
						},
					},
				},
				ir.Rule{
					Line: 426,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 426, Value: "io.WriteString($w, fmt.Sprint($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprint($w, $args)",
					SuggestTemplate: "fmt.Fprint($w, $args)",
				},
				ir.Rule{
					Line: 429,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 429, Value: "io.WriteString($w, fmt.Sprintf($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintf($w, $args)",
					SuggestTemplate: "fmt.Fprintf($w, $args)",
				},
				ir.Rule{
					Line: 432,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 432, Value: "io.WriteString($w, fmt.Sprintln($*args))"},
					},
					ReportTemplate:  "$$ => fmt.Fprintln($w, $args)",
					SuggestTemplate: "fmt.Fprintln($w, $args)",
				},
			},
		},
		ir.RuleGroup{
			Line:        440,
			Name:        "writeString",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects w.Write calls which can be replaced with w.WriteString",
			DocBefore:  "w.Write([]byte(\"foo\"))",
			DocAfter:   "w.WriteString(\"foo\")",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 441,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 441, Value: "$w.Write([]byte($s))"},
					},
					ReportTemplate:  "$$ => $w.WriteString($s)",
					SuggestTemplate: "$w.WriteString($s)",
					WhereExpr: ir.FilterExpr{
						Line: 442,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.StringWriter\") && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  442,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.StringWriter\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 442, Op: ir.FilterStringOp, Src: "\"io.StringWriter\"", Value: "io.StringWriter"},
								},
							},
							ir.FilterExpr{
								Line:  442,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 442, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        450,
			Name:        "writeBytes",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects w.WriteString calls which can be replaced with w.Write",
			DocBefore:  "w.WriteString(buf.String())",
			DocAfter:   "w.Write(buf.Bytes())",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 455,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 455, Value: "io.WriteString($w, $buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 456,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  456,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
								},
							},
							ir.FilterExpr{
								Line:  456,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 459,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 459, Value: "io.WriteString($w, string($buf.Bytes()))"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 460,
						Op:   ir.FilterOrOp,
						Src:  "isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  460,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
								},
							},
							ir.FilterExpr{
								Line:  460,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
								Value: "buf",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 463,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 463, Value: "$w.WriteString($buf.String())"},
					},
					ReportTemplate:  "$$ => $w.Write($buf.Bytes())",
					SuggestTemplate: "$w.Write($buf.Bytes())",
					WhereExpr: ir.FilterExpr{
						Line: 464,
						Op:   ir.FilterAndOp,
						Src:  "m[\"w\"].Type.Implements(\"io.Writer\") && isBuffer(m[\"buf\"])",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  464,
								Op:    ir.FilterVarTypeImplementsOp,
								Src:   "m[\"w\"].Type.Implements(\"io.Writer\")",
								Value: "w",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 464, Op: ir.FilterStringOp, Src: "\"io.Writer\"", Value: "io.Writer"},
								},
							},
							ir.FilterExpr{
								Line: 464,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  464,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  464,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 452, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        472,
			Name:        "bufferString",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects bytes.Buffer String() calls where Bytes() could be used instead",
			DocBefore:  "strings.Contains(buf.String(), string(b))",
			DocAfter:   "bytes.Contains(buf.Bytes(), b)",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 477,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 477, Value: "strings.Contains($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 478,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 478,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  478,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  478,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  478,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 478, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 480,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 480, Value: "strings.HasPrefix($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 481,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 481,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  481,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  481,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  481,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 481, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 483,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 483, Value: "strings.HasSuffix($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 484,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 484,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  484,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  484,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  484,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 484, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 486,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 486, Value: "strings.Count($buf.String(), string($b))"},
					},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), $b)",
					SuggestTemplate: "bytes.Count($buf.Bytes(), $b)",
					WhereExpr: ir.FilterExpr{
						Line: 487,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"b\"].Type.Is(`[]byte`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 487,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  487,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  487,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  487,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"b\"].Type.Is(`[]byte`)",
								Value: "b",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 487, Op: ir.FilterStringOp, Src: "`[]byte`", Value: "[]byte"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 490,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 490, Value: "strings.Contains($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.Contains($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Contains($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 491,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 491,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  491,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  491,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  491,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 491, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 493,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 493, Value: "strings.HasPrefix($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.HasPrefix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasPrefix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 494,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 494,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  494,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  494,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  494,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 494, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 496,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 496, Value: "strings.HasSuffix($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.HasSuffix($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.HasSuffix($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 497,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 497,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  497,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  497,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  497,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 497, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
				ir.Rule{
					Line: 499,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 499, Value: "strings.Count($buf.String(), $s)"},
					},
					ReportTemplate:  "$$ => bytes.Count($buf.Bytes(), []byte($s))",
					SuggestTemplate: "bytes.Count($buf.Bytes(), []byte($s))",
					WhereExpr: ir.FilterExpr{
						Line: 500,
						Op:   ir.FilterAndOp,
						Src:  "isBuffer(m[\"buf\"]) && m[\"s\"].Type.Is(`string`)",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 500,
								Op:   ir.FilterOrOp,
								Src:  "isBuffer(m[\"buf\"])",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  500,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`bytes.Buffer`", Value: "bytes.Buffer"},
										},
									},
									ir.FilterExpr{
										Line:  500,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"buf\"].Type.Is(`*bytes.Buffer`)",
										Value: "buf",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 474, Op: ir.FilterStringOp, Src: "`*bytes.Buffer`", Value: "*bytes.Buffer"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line:  500,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"s\"].Type.Is(`string`)",
								Value: "s",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 500, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
								},
							},
						},
					},
				},
			},
		},
		ir.RuleGroup{
			Line:        506,
			Name:        "rangeExprCopy",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects array range loops that result in an excessive full data copy",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 507,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 507, Value: "for $_, $_ := range $e { $*_ }"},
						ir.PatternString{Line: 507, Value: "for $_, $_ = range $e { $*_ }"},
					},
					ReportTemplate:  "$e => &$e",
					SuggestTemplate: "&$e",
					WhereExpr: ir.FilterExpr{
						Line: 508,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line: 508,
								Op:   ir.FilterAndOp,
								Src:  "m[\"e\"].Addressable && m[\"e\"].Type.Is(`[$_]$_`)",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  508,
										Op:    ir.FilterVarAddressableOp,
										Src:   "m[\"e\"].Addressable",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  508,
										Op:    ir.FilterVarTypeIsOp,
										Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
										Value: "e",
										Args: []ir.FilterExpr{
											ir.FilterExpr{Line: 508, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"},
										},
									},
								},
							},
							ir.FilterExpr{
								Line: 508,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  508,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  508,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
				ir.Rule{
					Line: 514,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 514, Value: "for $_, $_ := range $e { $*_ }"},
						ir.PatternString{Line: 514, Value: "for $_, $_ = range $e { $*_ }"},
					},
					ReportTemplate: "range over big array value expression is ineffective",
					WhereExpr: ir.FilterExpr{
						Line: 515,
						Op:   ir.FilterAndOp,
						Src:  "m[\"e\"].Type.Is(`[$_]$_`) && m[\"e\"].Type.Size > 2048",
						Args: []ir.FilterExpr{
							ir.FilterExpr{
								Line:  515,
								Op:    ir.FilterVarTypeIsOp,
								Src:   "m[\"e\"].Type.Is(`[$_]$_`)",
								Value: "e",
								Args: []ir.FilterExpr{
									ir.FilterExpr{Line: 515, Op: ir.FilterStringOp, Src: "`[$_]$_`", Value: "[$_]$_"},
								},
							},
							ir.FilterExpr{
								Line: 515,
								Op:   ir.FilterGtOp,
								Src:  "m[\"e\"].Type.Size > 2048",
								Args: []ir.FilterExpr{
									ir.FilterExpr{
										Line:  515,
										Op:    ir.FilterVarTypeSizeOp,
										Src:   "m[\"e\"].Type.Size",
										Value: "e",
									},
									ir.FilterExpr{
										Line:  515,
										Op:    ir.FilterIntOp,
										Src:   "2048",
										Value: int64(2048),
									},
								},
							},
						},
					},
					LocationVar: "e",
				},
			},
		},
		ir.RuleGroup{
			Line:        522,
			Name:        "rangeToAppend",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects range loops that can be turned into a single append call",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 523,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 523, Value: "for $_, $x := range $src { $dst = append($dst, $x) }"},
					},
					ReportTemplate:  "for ... { ... } => $dst = append($dst, $src...)",
					SuggestTemplate: "$dst = append($dst, $src...)",
				},
			},
		},
		ir.RuleGroup{
			Line:        530,
			Name:        "rangeRuneSlice",
			MatcherName: "m",
			DocTags: []string{
				"o1",
			},
			DocSummary: "Detects a range over []rune(string) where copying to a new slice is redundant",
			Rules: []ir.Rule{
				ir.Rule{
					Line: 531,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 531, Value: "for _, $r := range []rune($s) { $*body }"},
					},
					ReportTemplate:  "range []rune($s) => range $s",
					SuggestTemplate: "for _, $r := range $s { $body }",
					WhereExpr: ir.FilterExpr{
						Line:  532,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 532, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 536,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 536, Value: "for _, $r = range []rune($s) { $*body }"},
					},
					ReportTemplate:  "range []rune($s) => range $s",
					SuggestTemplate: "for _, $r = range $s { $body }",
					WhereExpr: ir.FilterExpr{
						Line:  537,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 537, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 541,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 541, Value: "for range []rune($s) { $*body }"},
					},
					ReportTemplate:  "range []rune($s) => range $s",
					SuggestTemplate: "for range $s { $body }",
					WhereExpr: ir.FilterExpr{
						Line:  542,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"s\"].Type.Underlying().Is(`string`)",
						Value: "s",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 542, Op: ir.FilterStringOp, Src: "`string`", Value: "string"},
						},
					},
				},
				ir.Rule{
					Line: 546,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 546, Value: "for _, $r := range string($runes) { $*body }"},
					},
					ReportTemplate:  "range string($runes) => range $runes",
					SuggestTemplate: "for _, $r := range $runes { $body }",
					WhereExpr: ir.FilterExpr{
						Line:  547,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 547, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"},
						},
					},
				},
				ir.Rule{
					Line: 551,
					SyntaxPatterns: []ir.PatternString{
						ir.PatternString{Line: 551, Value: "for _, $r = range string($runes) { $*body }"},
					},
					ReportTemplate:  "range string($runes) => range $runes",
					SuggestTemplate: "for _, $r = range $runes { $body }",
					WhereExpr: ir.FilterExpr{
						Line:  552,
						Op:    ir.FilterVarTypeUnderlyingIsOp,
						Src:   "m[\"runes\"].Type.Underlying().Is(`[]rune`)",
						Value: "runes",
						Args: []ir.FilterExpr{
							ir.FilterExpr{Line: 552, Op: ir.FilterStringOp, Src: "`[]rune`", Value: "[]rune"},
						},
					},
				},
			},
		},
	},
}

